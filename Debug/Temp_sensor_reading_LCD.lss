
Temp_sensor_reading_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e2c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00002e2c  00002ea0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002130  00000000  00000000  00002fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c58  00000000  00000000  000050e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00005ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  000060ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000084d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000985b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000aa34  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000abf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000aeea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b858  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	fe e2       	ldi	r31, 0x2E	; 46
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 28 16 	call	0x2c50	; 0x2c50 <main>
      7a:	0c 94 14 17 	jmp	0x2e28	; 0x2e28 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e6       	ldi	r26, 0x68	; 104
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	88 e6       	ldi	r24, 0x68	; 104
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	68 e6       	ldi	r22, 0x68	; 104
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a4 16 	jmp	0x2d48	; 0x2d48 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__ltsf2+0x56>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__ltsf2+0x56>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__ltsf2+0x58>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a8 16 	jmp	0x2d50	; 0x2d50 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c4 16 	jmp	0x2d88	; 0x2d88 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 a0 16 	jmp	0x2d40	; 0x2d40 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e0 59       	subi	r30, 0x90	; 144
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_init>:

#include "ADC.h"


void ADC_init(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	ADMUX=0;
     e26:	e7 e2       	ldi	r30, 0x27	; 39
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	10 82       	st	Z, r1
	ADCSRA = (1<<ADEN) | (1<<ADPS1) | (1<<ADPS0);
     e2c:	e6 e2       	ldi	r30, 0x26	; 38
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	83 e8       	ldi	r24, 0x83	; 131
     e32:	80 83       	st	Z, r24
}
     e34:	cf 91       	pop	r28
     e36:	df 91       	pop	r29
     e38:	08 95       	ret

00000e3a <ADC_read>:


uint16 ADC_read(uint8 channel_num)
{
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	0f 92       	push	r0
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
     e44:	89 83       	std	Y+1, r24	; 0x01
	channel_num&=0x07;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	87 70       	andi	r24, 0x07	; 7
     e4a:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0X0E;
     e4c:	a7 e2       	ldi	r26, 0x27	; 39
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e7 e2       	ldi	r30, 0x27	; 39
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	8e 70       	andi	r24, 0x0E	; 14
     e58:	8c 93       	st	X, r24
	ADMUX|=channel_num;
     e5a:	a7 e2       	ldi	r26, 0x27	; 39
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e7 e2       	ldi	r30, 0x27	; 39
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	90 81       	ld	r25, Z
     e64:	89 81       	ldd	r24, Y+1	; 0x01
     e66:	89 2b       	or	r24, r25
     e68:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC);
     e6a:	a6 e2       	ldi	r26, 0x26	; 38
     e6c:	b0 e0       	ldi	r27, 0x00	; 0
     e6e:	e6 e2       	ldi	r30, 0x26	; 38
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	80 81       	ld	r24, Z
     e74:	80 64       	ori	r24, 0x40	; 64
     e76:	8c 93       	st	X, r24
	while(IS_CLEAR(ADCSRA,ADIF));
     e78:	e6 e2       	ldi	r30, 0x26	; 38
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	80 71       	andi	r24, 0x10	; 16
     e84:	90 70       	andi	r25, 0x00	; 0
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	b9 f3       	breq	.-18     	; 0xe78 <ADC_read+0x3e>
	SET_BIT(ADCSRA,ADIF);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 61       	ori	r24, 0x10	; 16
     e96:	8c 93       	st	X, r24
	return ADC;
     e98:	e4 e2       	ldi	r30, 0x24	; 36
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
}
     ea0:	0f 90       	pop	r0
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <DIO_setPINDir>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

void DIO_setPINDir(uint8 portname,uint8 pin,uint8 direction)
{
     ea8:	df 93       	push	r29
     eaa:	cf 93       	push	r28
     eac:	00 d0       	rcall	.+0      	; 0xeae <DIO_setPINDir+0x6>
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <DIO_setPINDir+0x8>
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	6a 83       	std	Y+2, r22	; 0x02
     eba:	4b 83       	std	Y+3, r20	; 0x03

	switch(portname)
     ebc:	89 81       	ldd	r24, Y+1	; 0x01
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3d 83       	std	Y+5, r19	; 0x05
     ec4:	2c 83       	std	Y+4, r18	; 0x04
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	82 34       	cpi	r24, 0x42	; 66
     ecc:	91 05       	cpc	r25, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <DIO_setPINDir+0x2a>
     ed0:	44 c0       	rjmp	.+136    	; 0xf5a <DIO_setPINDir+0xb2>
     ed2:	2c 81       	ldd	r18, Y+4	; 0x04
     ed4:	3d 81       	ldd	r19, Y+5	; 0x05
     ed6:	23 34       	cpi	r18, 0x43	; 67
     ed8:	31 05       	cpc	r19, r1
     eda:	34 f4       	brge	.+12     	; 0xee8 <DIO_setPINDir+0x40>
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	9d 81       	ldd	r25, Y+5	; 0x05
     ee0:	81 34       	cpi	r24, 0x41	; 65
     ee2:	91 05       	cpc	r25, r1
     ee4:	71 f0       	breq	.+28     	; 0xf02 <DIO_setPINDir+0x5a>
     ee6:	bc c0       	rjmp	.+376    	; 0x1060 <DIO_setPINDir+0x1b8>
     ee8:	2c 81       	ldd	r18, Y+4	; 0x04
     eea:	3d 81       	ldd	r19, Y+5	; 0x05
     eec:	23 34       	cpi	r18, 0x43	; 67
     eee:	31 05       	cpc	r19, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <DIO_setPINDir+0x4c>
     ef2:	5f c0       	rjmp	.+190    	; 0xfb2 <DIO_setPINDir+0x10a>
     ef4:	8c 81       	ldd	r24, Y+4	; 0x04
     ef6:	9d 81       	ldd	r25, Y+5	; 0x05
     ef8:	84 34       	cpi	r24, 0x44	; 68
     efa:	91 05       	cpc	r25, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <DIO_setPINDir+0x58>
     efe:	85 c0       	rjmp	.+266    	; 0x100a <DIO_setPINDir+0x162>
     f00:	af c0       	rjmp	.+350    	; 0x1060 <DIO_setPINDir+0x1b8>
	{

	case 'A':
		if( direction==1 )
     f02:	8b 81       	ldd	r24, Y+3	; 0x03
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	a1 f4       	brne	.+40     	; 0xf30 <DIO_setPINDir+0x88>
		{
			SET_BIT(DDRA,pin);
     f08:	aa e3       	ldi	r26, 0x3A	; 58
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ea e3       	ldi	r30, 0x3A	; 58
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	48 2f       	mov	r20, r24
     f14:	8a 81       	ldd	r24, Y+2	; 0x02
     f16:	28 2f       	mov	r18, r24
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	02 2e       	mov	r0, r18
     f20:	02 c0       	rjmp	.+4      	; 0xf26 <DIO_setPINDir+0x7e>
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	0a 94       	dec	r0
     f28:	e2 f7       	brpl	.-8      	; 0xf22 <DIO_setPINDir+0x7a>
     f2a:	84 2b       	or	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	98 c0       	rjmp	.+304    	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRA,pin);
     f30:	aa e3       	ldi	r26, 0x3A	; 58
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e3       	ldi	r30, 0x3A	; 58
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_setPINDir+0xa6>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_setPINDir+0xa2>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	83 c0       	rjmp	.+262    	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'B':
		if( direction==1 )
     f5a:	8b 81       	ldd	r24, Y+3	; 0x03
     f5c:	81 30       	cpi	r24, 0x01	; 1
     f5e:	a1 f4       	brne	.+40     	; 0xf88 <DIO_setPINDir+0xe0>
		{
			SET_BIT(DDRB,pin);
     f60:	a7 e3       	ldi	r26, 0x37	; 55
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e7 e3       	ldi	r30, 0x37	; 55
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	48 2f       	mov	r20, r24
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	28 2f       	mov	r18, r24
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	02 2e       	mov	r0, r18
     f78:	02 c0       	rjmp	.+4      	; 0xf7e <DIO_setPINDir+0xd6>
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	0a 94       	dec	r0
     f80:	e2 f7       	brpl	.-8      	; 0xf7a <DIO_setPINDir+0xd2>
     f82:	84 2b       	or	r24, r20
     f84:	8c 93       	st	X, r24
     f86:	6c c0       	rjmp	.+216    	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRB,pin);
     f88:	a7 e3       	ldi	r26, 0x37	; 55
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e7 e3       	ldi	r30, 0x37	; 55
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	8a 81       	ldd	r24, Y+2	; 0x02
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_setPINDir+0xfe>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_setPINDir+0xfa>
     faa:	80 95       	com	r24
     fac:	84 23       	and	r24, r20
     fae:	8c 93       	st	X, r24
     fb0:	57 c0       	rjmp	.+174    	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'C':
		if( direction==1 )
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	81 30       	cpi	r24, 0x01	; 1
     fb6:	a1 f4       	brne	.+40     	; 0xfe0 <DIO_setPINDir+0x138>
		{
			SET_BIT(DDRC,pin);
     fb8:	a4 e3       	ldi	r26, 0x34	; 52
     fba:	b0 e0       	ldi	r27, 0x00	; 0
     fbc:	e4 e3       	ldi	r30, 0x34	; 52
     fbe:	f0 e0       	ldi	r31, 0x00	; 0
     fc0:	80 81       	ld	r24, Z
     fc2:	48 2f       	mov	r20, r24
     fc4:	8a 81       	ldd	r24, Y+2	; 0x02
     fc6:	28 2f       	mov	r18, r24
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	81 e0       	ldi	r24, 0x01	; 1
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <DIO_setPINDir+0x12e>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <DIO_setPINDir+0x12a>
     fda:	84 2b       	or	r24, r20
     fdc:	8c 93       	st	X, r24
     fde:	40 c0       	rjmp	.+128    	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRC,pin);
     fe0:	a4 e3       	ldi	r26, 0x34	; 52
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e3       	ldi	r30, 0x34	; 52
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	48 2f       	mov	r20, r24
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	02 2e       	mov	r0, r18
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <DIO_setPINDir+0x156>
     ffa:	88 0f       	add	r24, r24
     ffc:	99 1f       	adc	r25, r25
     ffe:	0a 94       	dec	r0
    1000:	e2 f7       	brpl	.-8      	; 0xffa <DIO_setPINDir+0x152>
    1002:	80 95       	com	r24
    1004:	84 23       	and	r24, r20
    1006:	8c 93       	st	X, r24
    1008:	2b c0       	rjmp	.+86     	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		break;
	case 'D':
		if( direction==1)
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	81 30       	cpi	r24, 0x01	; 1
    100e:	a1 f4       	brne	.+40     	; 0x1038 <DIO_setPINDir+0x190>
		{
			SET_BIT(DDRD,pin);
    1010:	a1 e3       	ldi	r26, 0x31	; 49
    1012:	b0 e0       	ldi	r27, 0x00	; 0
    1014:	e1 e3       	ldi	r30, 0x31	; 49
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	48 2f       	mov	r20, r24
    101c:	8a 81       	ldd	r24, Y+2	; 0x02
    101e:	28 2f       	mov	r18, r24
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	02 2e       	mov	r0, r18
    1028:	02 c0       	rjmp	.+4      	; 0x102e <DIO_setPINDir+0x186>
    102a:	88 0f       	add	r24, r24
    102c:	99 1f       	adc	r25, r25
    102e:	0a 94       	dec	r0
    1030:	e2 f7       	brpl	.-8      	; 0x102a <DIO_setPINDir+0x182>
    1032:	84 2b       	or	r24, r20
    1034:	8c 93       	st	X, r24
    1036:	14 c0       	rjmp	.+40     	; 0x1060 <DIO_setPINDir+0x1b8>
		}
		else
		{
			CLEAR_BIT(DDRD,pin);
    1038:	a1 e3       	ldi	r26, 0x31	; 49
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e1 e3       	ldi	r30, 0x31	; 49
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	48 2f       	mov	r20, r24
    1044:	8a 81       	ldd	r24, Y+2	; 0x02
    1046:	28 2f       	mov	r18, r24
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	02 2e       	mov	r0, r18
    1050:	02 c0       	rjmp	.+4      	; 0x1056 <DIO_setPINDir+0x1ae>
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	0a 94       	dec	r0
    1058:	e2 f7       	brpl	.-8      	; 0x1052 <DIO_setPINDir+0x1aa>
    105a:	80 95       	com	r24
    105c:	84 23       	and	r24, r20
    105e:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <DIO_write_PIN>:


void DIO_write_PIN(uint8 portname,uint8 pin,uint8 pinvalue)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	00 d0       	rcall	.+0      	; 0x1076 <DIO_write_PIN+0x6>
    1076:	00 d0       	rcall	.+0      	; 0x1078 <DIO_write_PIN+0x8>
    1078:	0f 92       	push	r0
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	89 83       	std	Y+1, r24	; 0x01
    1080:	6a 83       	std	Y+2, r22	; 0x02
    1082:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1084:	89 81       	ldd	r24, Y+1	; 0x01
    1086:	28 2f       	mov	r18, r24
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	3d 83       	std	Y+5, r19	; 0x05
    108c:	2c 83       	std	Y+4, r18	; 0x04
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	82 34       	cpi	r24, 0x42	; 66
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_write_PIN+0x2a>
    1098:	44 c0       	rjmp	.+136    	; 0x1122 <DIO_write_PIN+0xb2>
    109a:	2c 81       	ldd	r18, Y+4	; 0x04
    109c:	3d 81       	ldd	r19, Y+5	; 0x05
    109e:	23 34       	cpi	r18, 0x43	; 67
    10a0:	31 05       	cpc	r19, r1
    10a2:	34 f4       	brge	.+12     	; 0x10b0 <DIO_write_PIN+0x40>
    10a4:	8c 81       	ldd	r24, Y+4	; 0x04
    10a6:	9d 81       	ldd	r25, Y+5	; 0x05
    10a8:	81 34       	cpi	r24, 0x41	; 65
    10aa:	91 05       	cpc	r25, r1
    10ac:	71 f0       	breq	.+28     	; 0x10ca <DIO_write_PIN+0x5a>
    10ae:	bc c0       	rjmp	.+376    	; 0x1228 <DIO_write_PIN+0x1b8>
    10b0:	2c 81       	ldd	r18, Y+4	; 0x04
    10b2:	3d 81       	ldd	r19, Y+5	; 0x05
    10b4:	23 34       	cpi	r18, 0x43	; 67
    10b6:	31 05       	cpc	r19, r1
    10b8:	09 f4       	brne	.+2      	; 0x10bc <DIO_write_PIN+0x4c>
    10ba:	5f c0       	rjmp	.+190    	; 0x117a <DIO_write_PIN+0x10a>
    10bc:	8c 81       	ldd	r24, Y+4	; 0x04
    10be:	9d 81       	ldd	r25, Y+5	; 0x05
    10c0:	84 34       	cpi	r24, 0x44	; 68
    10c2:	91 05       	cpc	r25, r1
    10c4:	09 f4       	brne	.+2      	; 0x10c8 <DIO_write_PIN+0x58>
    10c6:	85 c0       	rjmp	.+266    	; 0x11d2 <DIO_write_PIN+0x162>
    10c8:	af c0       	rjmp	.+350    	; 0x1228 <DIO_write_PIN+0x1b8>
	{

	case 'A':
		if( pinvalue==1 )
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	81 30       	cpi	r24, 0x01	; 1
    10ce:	a1 f4       	brne	.+40     	; 0x10f8 <DIO_write_PIN+0x88>
		{
			SET_BIT(PORTA,pin);
    10d0:	ab e3       	ldi	r26, 0x3B	; 59
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	eb e3       	ldi	r30, 0x3B	; 59
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	48 2f       	mov	r20, r24
    10dc:	8a 81       	ldd	r24, Y+2	; 0x02
    10de:	28 2f       	mov	r18, r24
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	02 2e       	mov	r0, r18
    10e8:	02 c0       	rjmp	.+4      	; 0x10ee <DIO_write_PIN+0x7e>
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	0a 94       	dec	r0
    10f0:	e2 f7       	brpl	.-8      	; 0x10ea <DIO_write_PIN+0x7a>
    10f2:	84 2b       	or	r24, r20
    10f4:	8c 93       	st	X, r24
    10f6:	98 c0       	rjmp	.+304    	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    10f8:	ab e3       	ldi	r26, 0x3B	; 59
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	eb e3       	ldi	r30, 0x3B	; 59
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	48 2f       	mov	r20, r24
    1104:	8a 81       	ldd	r24, Y+2	; 0x02
    1106:	28 2f       	mov	r18, r24
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	02 2e       	mov	r0, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_write_PIN+0xa6>
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	0a 94       	dec	r0
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_write_PIN+0xa2>
    111a:	80 95       	com	r24
    111c:	84 23       	and	r24, r20
    111e:	8c 93       	st	X, r24
    1120:	83 c0       	rjmp	.+262    	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		break;
	case 'B':
		if( pinvalue==1 )
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	81 30       	cpi	r24, 0x01	; 1
    1126:	a1 f4       	brne	.+40     	; 0x1150 <DIO_write_PIN+0xe0>
		{
			SET_BIT(PORTB,pin);
    1128:	a8 e3       	ldi	r26, 0x38	; 56
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e8 e3       	ldi	r30, 0x38	; 56
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	48 2f       	mov	r20, r24
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	81 e0       	ldi	r24, 0x01	; 1
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	02 2e       	mov	r0, r18
    1140:	02 c0       	rjmp	.+4      	; 0x1146 <DIO_write_PIN+0xd6>
    1142:	88 0f       	add	r24, r24
    1144:	99 1f       	adc	r25, r25
    1146:	0a 94       	dec	r0
    1148:	e2 f7       	brpl	.-8      	; 0x1142 <DIO_write_PIN+0xd2>
    114a:	84 2b       	or	r24, r20
    114c:	8c 93       	st	X, r24
    114e:	6c c0       	rjmp	.+216    	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTB,pin);
    1150:	a8 e3       	ldi	r26, 0x38	; 56
    1152:	b0 e0       	ldi	r27, 0x00	; 0
    1154:	e8 e3       	ldi	r30, 0x38	; 56
    1156:	f0 e0       	ldi	r31, 0x00	; 0
    1158:	80 81       	ld	r24, Z
    115a:	48 2f       	mov	r20, r24
    115c:	8a 81       	ldd	r24, Y+2	; 0x02
    115e:	28 2f       	mov	r18, r24
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	02 2e       	mov	r0, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <DIO_write_PIN+0xfe>
    116a:	88 0f       	add	r24, r24
    116c:	99 1f       	adc	r25, r25
    116e:	0a 94       	dec	r0
    1170:	e2 f7       	brpl	.-8      	; 0x116a <DIO_write_PIN+0xfa>
    1172:	80 95       	com	r24
    1174:	84 23       	and	r24, r20
    1176:	8c 93       	st	X, r24
    1178:	57 c0       	rjmp	.+174    	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		break;
	case 'C':
		if( pinvalue==1 )
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	a1 f4       	brne	.+40     	; 0x11a8 <DIO_write_PIN+0x138>
		{
			SET_BIT(PORTC,pin);
    1180:	a5 e3       	ldi	r26, 0x35	; 53
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	e5 e3       	ldi	r30, 0x35	; 53
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <DIO_write_PIN+0x12e>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <DIO_write_PIN+0x12a>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	40 c0       	rjmp	.+128    	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTC,pin);
    11a8:	a5 e3       	ldi	r26, 0x35	; 53
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e3       	ldi	r30, 0x35	; 53
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <DIO_write_PIN+0x156>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <DIO_write_PIN+0x152>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	2b c0       	rjmp	.+86     	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		break;
	case 'D':
		if( pinvalue==1)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	a1 f4       	brne	.+40     	; 0x1200 <DIO_write_PIN+0x190>
		{
			SET_BIT(PORTD,pin);
    11d8:	a2 e3       	ldi	r26, 0x32	; 50
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e2 e3       	ldi	r30, 0x32	; 50
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <DIO_write_PIN+0x186>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <DIO_write_PIN+0x182>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	14 c0       	rjmp	.+40     	; 0x1228 <DIO_write_PIN+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTD,pin);
    1200:	a2 e3       	ldi	r26, 0x32	; 50
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e2 e3       	ldi	r30, 0x32	; 50
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <DIO_write_PIN+0x1ae>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <DIO_write_PIN+0x1aa>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	cf 91       	pop	r28
    1234:	df 91       	pop	r29
    1236:	08 95       	ret

00001238 <DIO_read_PIN>:

uint8 DIO_read_PIN(uint8 portname,uint8 pin)
{
    1238:	df 93       	push	r29
    123a:	cf 93       	push	r28
    123c:	00 d0       	rcall	.+0      	; 0x123e <DIO_read_PIN+0x6>
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_read_PIN+0x8>
    1240:	0f 92       	push	r0
    1242:	cd b7       	in	r28, 0x3d	; 61
    1244:	de b7       	in	r29, 0x3e	; 62
    1246:	8a 83       	std	Y+2, r24	; 0x02
    1248:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_val=0;
    124a:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    124c:	8a 81       	ldd	r24, Y+2	; 0x02
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	3d 83       	std	Y+5, r19	; 0x05
    1254:	2c 83       	std	Y+4, r18	; 0x04
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	82 34       	cpi	r24, 0x42	; 66
    125c:	91 05       	cpc	r25, r1
    125e:	41 f1       	breq	.+80     	; 0x12b0 <DIO_read_PIN+0x78>
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	3d 81       	ldd	r19, Y+5	; 0x05
    1264:	23 34       	cpi	r18, 0x43	; 67
    1266:	31 05       	cpc	r19, r1
    1268:	34 f4       	brge	.+12     	; 0x1276 <DIO_read_PIN+0x3e>
    126a:	8c 81       	ldd	r24, Y+4	; 0x04
    126c:	9d 81       	ldd	r25, Y+5	; 0x05
    126e:	81 34       	cpi	r24, 0x41	; 65
    1270:	91 05       	cpc	r25, r1
    1272:	61 f0       	breq	.+24     	; 0x128c <DIO_read_PIN+0x54>
    1274:	52 c0       	rjmp	.+164    	; 0x131a <DIO_read_PIN+0xe2>
    1276:	2c 81       	ldd	r18, Y+4	; 0x04
    1278:	3d 81       	ldd	r19, Y+5	; 0x05
    127a:	23 34       	cpi	r18, 0x43	; 67
    127c:	31 05       	cpc	r19, r1
    127e:	51 f1       	breq	.+84     	; 0x12d4 <DIO_read_PIN+0x9c>
    1280:	8c 81       	ldd	r24, Y+4	; 0x04
    1282:	9d 81       	ldd	r25, Y+5	; 0x05
    1284:	84 34       	cpi	r24, 0x44	; 68
    1286:	91 05       	cpc	r25, r1
    1288:	b9 f1       	breq	.+110    	; 0x12f8 <DIO_read_PIN+0xc0>
    128a:	47 c0       	rjmp	.+142    	; 0x131a <DIO_read_PIN+0xe2>
	{

	case 'A':
		pin_val=READ_BIT(PINA,pin);
    128c:	e9 e3       	ldi	r30, 0x39	; 57
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8b 81       	ldd	r24, Y+3	; 0x03
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <DIO_read_PIN+0x6e>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <DIO_read_PIN+0x6a>
    12aa:	84 23       	and	r24, r20
    12ac:	89 83       	std	Y+1, r24	; 0x01
    12ae:	35 c0       	rjmp	.+106    	; 0x131a <DIO_read_PIN+0xe2>
		break;
	case 'B':
		pin_val=READ_BIT(PINB,pin);
    12b0:	e6 e3       	ldi	r30, 0x36	; 54
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_read_PIN+0x92>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_read_PIN+0x8e>
    12ce:	84 23       	and	r24, r20
    12d0:	89 83       	std	Y+1, r24	; 0x01
    12d2:	23 c0       	rjmp	.+70     	; 0x131a <DIO_read_PIN+0xe2>
		break;
	case 'C':
		pin_val=READ_BIT(PINC,pin);
    12d4:	e3 e3       	ldi	r30, 0x33	; 51
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_read_PIN+0xb6>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_read_PIN+0xb2>
    12f2:	84 23       	and	r24, r20
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	11 c0       	rjmp	.+34     	; 0x131a <DIO_read_PIN+0xe2>
		break;
	case 'D':
		pin_val=READ_BIT(PIND,pin);
    12f8:	e0 e3       	ldi	r30, 0x30	; 48
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	48 2f       	mov	r20, r24
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	02 2e       	mov	r0, r18
    130c:	02 c0       	rjmp	.+4      	; 0x1312 <DIO_read_PIN+0xda>
    130e:	88 0f       	add	r24, r24
    1310:	99 1f       	adc	r25, r25
    1312:	0a 94       	dec	r0
    1314:	e2 f7       	brpl	.-8      	; 0x130e <DIO_read_PIN+0xd6>
    1316:	84 23       	and	r24, r20
    1318:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return pin_val;
    131a:	89 81       	ldd	r24, Y+1	; 0x01
}
    131c:	0f 90       	pop	r0
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	0f 90       	pop	r0
    1324:	0f 90       	pop	r0
    1326:	cf 91       	pop	r28
    1328:	df 91       	pop	r29
    132a:	08 95       	ret

0000132c <DIO_BIT_TOGGLE>:

void DIO_BIT_TOGGLE(uint8 portname,uint8 pin)
{
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_BIT_TOGGLE+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <DIO_BIT_TOGGLE+0x8>
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	89 83       	std	Y+1, r24	; 0x01
    133a:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	28 2f       	mov	r18, r24
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	3c 83       	std	Y+4, r19	; 0x04
    1344:	2b 83       	std	Y+3, r18	; 0x03
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	82 34       	cpi	r24, 0x42	; 66
    134c:	91 05       	cpc	r25, r1
    134e:	51 f1       	breq	.+84     	; 0x13a4 <DIO_BIT_TOGGLE+0x78>
    1350:	2b 81       	ldd	r18, Y+3	; 0x03
    1352:	3c 81       	ldd	r19, Y+4	; 0x04
    1354:	23 34       	cpi	r18, 0x43	; 67
    1356:	31 05       	cpc	r19, r1
    1358:	34 f4       	brge	.+12     	; 0x1366 <DIO_BIT_TOGGLE+0x3a>
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	81 34       	cpi	r24, 0x41	; 65
    1360:	91 05       	cpc	r25, r1
    1362:	61 f0       	breq	.+24     	; 0x137c <DIO_BIT_TOGGLE+0x50>
    1364:	5a c0       	rjmp	.+180    	; 0x141a <DIO_BIT_TOGGLE+0xee>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	23 34       	cpi	r18, 0x43	; 67
    136c:	31 05       	cpc	r19, r1
    136e:	71 f1       	breq	.+92     	; 0x13cc <DIO_BIT_TOGGLE+0xa0>
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	84 34       	cpi	r24, 0x44	; 68
    1376:	91 05       	cpc	r25, r1
    1378:	e9 f1       	breq	.+122    	; 0x13f4 <DIO_BIT_TOGGLE+0xc8>
    137a:	4f c0       	rjmp	.+158    	; 0x141a <DIO_BIT_TOGGLE+0xee>
	{

	case 'A':
		TOGGLE_BIT(PORTA,pin);
    137c:	ab e3       	ldi	r26, 0x3B	; 59
    137e:	b0 e0       	ldi	r27, 0x00	; 0
    1380:	eb e3       	ldi	r30, 0x3B	; 59
    1382:	f0 e0       	ldi	r31, 0x00	; 0
    1384:	80 81       	ld	r24, Z
    1386:	48 2f       	mov	r20, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	28 2f       	mov	r18, r24
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	02 2e       	mov	r0, r18
    1394:	02 c0       	rjmp	.+4      	; 0x139a <DIO_BIT_TOGGLE+0x6e>
    1396:	88 0f       	add	r24, r24
    1398:	99 1f       	adc	r25, r25
    139a:	0a 94       	dec	r0
    139c:	e2 f7       	brpl	.-8      	; 0x1396 <DIO_BIT_TOGGLE+0x6a>
    139e:	84 27       	eor	r24, r20
    13a0:	8c 93       	st	X, r24
    13a2:	3b c0       	rjmp	.+118    	; 0x141a <DIO_BIT_TOGGLE+0xee>
		break;
	case 'B':
		TOGGLE_BIT(PORTB,pin);
    13a4:	a8 e3       	ldi	r26, 0x38	; 56
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	e8 e3       	ldi	r30, 0x38	; 56
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	48 2f       	mov	r20, r24
    13b0:	8a 81       	ldd	r24, Y+2	; 0x02
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	02 2e       	mov	r0, r18
    13bc:	02 c0       	rjmp	.+4      	; 0x13c2 <DIO_BIT_TOGGLE+0x96>
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	0a 94       	dec	r0
    13c4:	e2 f7       	brpl	.-8      	; 0x13be <DIO_BIT_TOGGLE+0x92>
    13c6:	84 27       	eor	r24, r20
    13c8:	8c 93       	st	X, r24
    13ca:	27 c0       	rjmp	.+78     	; 0x141a <DIO_BIT_TOGGLE+0xee>
		break;
	case 'C':
		TOGGLE_BIT(PORTC,pin);
    13cc:	a5 e3       	ldi	r26, 0x35	; 53
    13ce:	b0 e0       	ldi	r27, 0x00	; 0
    13d0:	e5 e3       	ldi	r30, 0x35	; 53
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	48 2f       	mov	r20, r24
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	02 2e       	mov	r0, r18
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <DIO_BIT_TOGGLE+0xbe>
    13e6:	88 0f       	add	r24, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	0a 94       	dec	r0
    13ec:	e2 f7       	brpl	.-8      	; 0x13e6 <DIO_BIT_TOGGLE+0xba>
    13ee:	84 27       	eor	r24, r20
    13f0:	8c 93       	st	X, r24
    13f2:	13 c0       	rjmp	.+38     	; 0x141a <DIO_BIT_TOGGLE+0xee>
		break;
	case 'D':
		TOGGLE_BIT(PORTD,pin);
    13f4:	a2 e3       	ldi	r26, 0x32	; 50
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	e2 e3       	ldi	r30, 0x32	; 50
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	48 2f       	mov	r20, r24
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	28 2f       	mov	r18, r24
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	02 2e       	mov	r0, r18
    140c:	02 c0       	rjmp	.+4      	; 0x1412 <DIO_BIT_TOGGLE+0xe6>
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	0a 94       	dec	r0
    1414:	e2 f7       	brpl	.-8      	; 0x140e <DIO_BIT_TOGGLE+0xe2>
    1416:	84 27       	eor	r24, r20
    1418:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    141a:	0f 90       	pop	r0
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <DIO_set_port_Dir>:

void DIO_set_port_Dir(uint8 portname,uint8 direction)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	00 d0       	rcall	.+0      	; 0x142e <DIO_set_port_Dir+0x6>
    142e:	00 d0       	rcall	.+0      	; 0x1430 <DIO_set_port_Dir+0x8>
    1430:	cd b7       	in	r28, 0x3d	; 61
    1432:	de b7       	in	r29, 0x3e	; 62
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	28 2f       	mov	r18, r24
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	3c 83       	std	Y+4, r19	; 0x04
    1440:	2b 83       	std	Y+3, r18	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	82 34       	cpi	r24, 0x42	; 66
    1448:	91 05       	cpc	r25, r1
    144a:	11 f1       	breq	.+68     	; 0x1490 <DIO_set_port_Dir+0x68>
    144c:	2b 81       	ldd	r18, Y+3	; 0x03
    144e:	3c 81       	ldd	r19, Y+4	; 0x04
    1450:	23 34       	cpi	r18, 0x43	; 67
    1452:	31 05       	cpc	r19, r1
    1454:	34 f4       	brge	.+12     	; 0x1462 <DIO_set_port_Dir+0x3a>
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	81 34       	cpi	r24, 0x41	; 65
    145c:	91 05       	cpc	r25, r1
    145e:	61 f0       	breq	.+24     	; 0x1478 <DIO_set_port_Dir+0x50>
    1460:	3a c0       	rjmp	.+116    	; 0x14d6 <DIO_set_port_Dir+0xae>
    1462:	2b 81       	ldd	r18, Y+3	; 0x03
    1464:	3c 81       	ldd	r19, Y+4	; 0x04
    1466:	23 34       	cpi	r18, 0x43	; 67
    1468:	31 05       	cpc	r19, r1
    146a:	f1 f0       	breq	.+60     	; 0x14a8 <DIO_set_port_Dir+0x80>
    146c:	8b 81       	ldd	r24, Y+3	; 0x03
    146e:	9c 81       	ldd	r25, Y+4	; 0x04
    1470:	84 34       	cpi	r24, 0x44	; 68
    1472:	91 05       	cpc	r25, r1
    1474:	29 f1       	breq	.+74     	; 0x14c0 <DIO_set_port_Dir+0x98>
    1476:	2f c0       	rjmp	.+94     	; 0x14d6 <DIO_set_port_Dir+0xae>
	{
	case 'A':
		if(direction==1)
    1478:	8a 81       	ldd	r24, Y+2	; 0x02
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	29 f4       	brne	.+10     	; 0x1488 <DIO_set_port_Dir+0x60>
		{
			DDRA=0xFF;
    147e:	ea e3       	ldi	r30, 0x3A	; 58
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	8f ef       	ldi	r24, 0xFF	; 255
    1484:	80 83       	st	Z, r24
    1486:	27 c0       	rjmp	.+78     	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRA=0;
    1488:	ea e3       	ldi	r30, 0x3A	; 58
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	10 82       	st	Z, r1
    148e:	23 c0       	rjmp	.+70     	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'B':
		if(direction==1)
    1490:	8a 81       	ldd	r24, Y+2	; 0x02
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	29 f4       	brne	.+10     	; 0x14a0 <DIO_set_port_Dir+0x78>
		{
			DDRB=0xFF;
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	80 83       	st	Z, r24
    149e:	1b c0       	rjmp	.+54     	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRB=0;
    14a0:	e7 e3       	ldi	r30, 0x37	; 55
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	10 82       	st	Z, r1
    14a6:	17 c0       	rjmp	.+46     	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'C':
		if(direction==1)
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <DIO_set_port_Dir+0x90>
		{
			DDRC=0XFF;
    14ae:	e4 e3       	ldi	r30, 0x34	; 52
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	8f ef       	ldi	r24, 0xFF	; 255
    14b4:	80 83       	st	Z, r24
    14b6:	0f c0       	rjmp	.+30     	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRC=0;
    14b8:	e4 e3       	ldi	r30, 0x34	; 52
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	10 82       	st	Z, r1
    14be:	0b c0       	rjmp	.+22     	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		break;
	case 'D':
		if(direction==1)
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	29 f4       	brne	.+10     	; 0x14d0 <DIO_set_port_Dir+0xa8>
		{
			DDRD=0XFF;
    14c6:	e1 e3       	ldi	r30, 0x31	; 49
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	8f ef       	ldi	r24, 0xFF	; 255
    14cc:	80 83       	st	Z, r24
    14ce:	03 c0       	rjmp	.+6      	; 0x14d6 <DIO_set_port_Dir+0xae>
		}
		else
		{
			DDRD=0;
    14d0:	e1 e3       	ldi	r30, 0x31	; 49
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	10 82       	st	Z, r1
		}
		break;
	default:
		break;
	}
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_write_port>:

void DIO_write_port(uint8 portname,uint8 portvalue)
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_write_port+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_write_port+0x8>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3c 83       	std	Y+4, r19	; 0x04
    14fc:	2b 83       	std	Y+3, r18	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	82 34       	cpi	r24, 0x42	; 66
    1504:	91 05       	cpc	r25, r1
    1506:	d9 f0       	breq	.+54     	; 0x153e <DIO_write_port+0x5a>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	23 34       	cpi	r18, 0x43	; 67
    150e:	31 05       	cpc	r19, r1
    1510:	34 f4       	brge	.+12     	; 0x151e <DIO_write_port+0x3a>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	81 34       	cpi	r24, 0x41	; 65
    1518:	91 05       	cpc	r25, r1
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_write_port+0x50>
    151c:	1e c0       	rjmp	.+60     	; 0x155a <DIO_write_port+0x76>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	23 34       	cpi	r18, 0x43	; 67
    1524:	31 05       	cpc	r19, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_write_port+0x64>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	84 34       	cpi	r24, 0x44	; 68
    152e:	91 05       	cpc	r25, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <DIO_write_port+0x6e>
    1532:	13 c0       	rjmp	.+38     	; 0x155a <DIO_write_port+0x76>
	{
	case 'A':
		PORTA=portvalue;
    1534:	eb e3       	ldi	r30, 0x3B	; 59
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	0e c0       	rjmp	.+28     	; 0x155a <DIO_write_port+0x76>
		break;
	case 'B':
		PORTB=portvalue;
    153e:	e8 e3       	ldi	r30, 0x38	; 56
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	09 c0       	rjmp	.+18     	; 0x155a <DIO_write_port+0x76>
		break;
	case 'C':
		PORTC=portvalue;
    1548:	e5 e3       	ldi	r30, 0x35	; 53
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	04 c0       	rjmp	.+8      	; 0x155a <DIO_write_port+0x76>
		break;
	case 'D':
		PORTD=portvalue;
    1552:	e2 e3       	ldi	r30, 0x32	; 50
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
	}
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_read_port>:

uint8 DIO_read_port(uint8 portname)
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_read_port+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_read_port+0x8>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	8a 83       	std	Y+2, r24	; 0x02
	uint8 port_val=0;
    1576:	19 82       	std	Y+1, r1	; 0x01
	switch(portname)
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	3c 83       	std	Y+4, r19	; 0x04
    1580:	2b 83       	std	Y+3, r18	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	82 34       	cpi	r24, 0x42	; 66
    1588:	91 05       	cpc	r25, r1
    158a:	d9 f0       	breq	.+54     	; 0x15c2 <DIO_read_port+0x5a>
    158c:	2b 81       	ldd	r18, Y+3	; 0x03
    158e:	3c 81       	ldd	r19, Y+4	; 0x04
    1590:	23 34       	cpi	r18, 0x43	; 67
    1592:	31 05       	cpc	r19, r1
    1594:	34 f4       	brge	.+12     	; 0x15a2 <DIO_read_port+0x3a>
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	81 34       	cpi	r24, 0x41	; 65
    159c:	91 05       	cpc	r25, r1
    159e:	61 f0       	breq	.+24     	; 0x15b8 <DIO_read_port+0x50>
    15a0:	1e c0       	rjmp	.+60     	; 0x15de <DIO_read_port+0x76>
    15a2:	2b 81       	ldd	r18, Y+3	; 0x03
    15a4:	3c 81       	ldd	r19, Y+4	; 0x04
    15a6:	23 34       	cpi	r18, 0x43	; 67
    15a8:	31 05       	cpc	r19, r1
    15aa:	81 f0       	breq	.+32     	; 0x15cc <DIO_read_port+0x64>
    15ac:	8b 81       	ldd	r24, Y+3	; 0x03
    15ae:	9c 81       	ldd	r25, Y+4	; 0x04
    15b0:	84 34       	cpi	r24, 0x44	; 68
    15b2:	91 05       	cpc	r25, r1
    15b4:	81 f0       	breq	.+32     	; 0x15d6 <DIO_read_port+0x6e>
    15b6:	13 c0       	rjmp	.+38     	; 0x15de <DIO_read_port+0x76>
	{

	case 'A':
		port_val=PINA;
    15b8:	e9 e3       	ldi	r30, 0x39	; 57
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	0e c0       	rjmp	.+28     	; 0x15de <DIO_read_port+0x76>
		break;
	case 'B':
		port_val=PINB;
    15c2:	e6 e3       	ldi	r30, 0x36	; 54
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	09 c0       	rjmp	.+18     	; 0x15de <DIO_read_port+0x76>
		break;
	case 'C':
		port_val=PINC;
    15cc:	e3 e3       	ldi	r30, 0x33	; 51
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	89 83       	std	Y+1, r24	; 0x01
    15d4:	04 c0       	rjmp	.+8      	; 0x15de <DIO_read_port+0x76>
		break;
	case 'D':
		port_val=PIND;
    15d6:	e0 e3       	ldi	r30, 0x30	; 48
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	89 83       	std	Y+1, r24	; 0x01
		break;
	default:
		break;
	}
	return port_val;
    15de:	89 81       	ldd	r24, Y+1	; 0x01
}
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <DIO_enablePullup_pin>:

void DIO_enablePullup_pin(uint8 portname,uint8 pin,uint8 status)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	00 d0       	rcall	.+0      	; 0x15f4 <DIO_enablePullup_pin+0x6>
    15f4:	00 d0       	rcall	.+0      	; 0x15f6 <DIO_enablePullup_pin+0x8>
    15f6:	0f 92       	push	r0
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	89 83       	std	Y+1, r24	; 0x01
    15fe:	6a 83       	std	Y+2, r22	; 0x02
    1600:	4b 83       	std	Y+3, r20	; 0x03
	switch(portname)
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	3d 83       	std	Y+5, r19	; 0x05
    160a:	2c 83       	std	Y+4, r18	; 0x04
    160c:	8c 81       	ldd	r24, Y+4	; 0x04
    160e:	9d 81       	ldd	r25, Y+5	; 0x05
    1610:	82 34       	cpi	r24, 0x42	; 66
    1612:	91 05       	cpc	r25, r1
    1614:	09 f4       	brne	.+2      	; 0x1618 <DIO_enablePullup_pin+0x2a>
    1616:	44 c0       	rjmp	.+136    	; 0x16a0 <DIO_enablePullup_pin+0xb2>
    1618:	2c 81       	ldd	r18, Y+4	; 0x04
    161a:	3d 81       	ldd	r19, Y+5	; 0x05
    161c:	23 34       	cpi	r18, 0x43	; 67
    161e:	31 05       	cpc	r19, r1
    1620:	34 f4       	brge	.+12     	; 0x162e <DIO_enablePullup_pin+0x40>
    1622:	8c 81       	ldd	r24, Y+4	; 0x04
    1624:	9d 81       	ldd	r25, Y+5	; 0x05
    1626:	81 34       	cpi	r24, 0x41	; 65
    1628:	91 05       	cpc	r25, r1
    162a:	71 f0       	breq	.+28     	; 0x1648 <DIO_enablePullup_pin+0x5a>
    162c:	bc c0       	rjmp	.+376    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
    162e:	2c 81       	ldd	r18, Y+4	; 0x04
    1630:	3d 81       	ldd	r19, Y+5	; 0x05
    1632:	23 34       	cpi	r18, 0x43	; 67
    1634:	31 05       	cpc	r19, r1
    1636:	09 f4       	brne	.+2      	; 0x163a <DIO_enablePullup_pin+0x4c>
    1638:	5f c0       	rjmp	.+190    	; 0x16f8 <DIO_enablePullup_pin+0x10a>
    163a:	8c 81       	ldd	r24, Y+4	; 0x04
    163c:	9d 81       	ldd	r25, Y+5	; 0x05
    163e:	84 34       	cpi	r24, 0x44	; 68
    1640:	91 05       	cpc	r25, r1
    1642:	09 f4       	brne	.+2      	; 0x1646 <DIO_enablePullup_pin+0x58>
    1644:	85 c0       	rjmp	.+266    	; 0x1750 <DIO_enablePullup_pin+0x162>
    1646:	af c0       	rjmp	.+350    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
	{
	case 'A':
		if(status==1)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	a1 f4       	brne	.+40     	; 0x1676 <DIO_enablePullup_pin+0x88>
		{
			SET_BIT(PORTA,pin);
    164e:	ab e3       	ldi	r26, 0x3B	; 59
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	eb e3       	ldi	r30, 0x3B	; 59
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <DIO_enablePullup_pin+0x7e>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <DIO_enablePullup_pin+0x7a>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	98 c0       	rjmp	.+304    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
		}
		else
		{
			CLEAR_BIT(PORTA,pin);
    1676:	ab e3       	ldi	r26, 0x3B	; 59
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	eb e3       	ldi	r30, 0x3B	; 59
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <DIO_enablePullup_pin+0xa6>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <DIO_enablePullup_pin+0xa2>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	83 c0       	rjmp	.+262    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
		}
		break;
	case 'B':
		if(status==1)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <DIO_enablePullup_pin+0xe0>
				{
					SET_BIT(PORTB,pin);
    16a6:	a8 e3       	ldi	r26, 0x38	; 56
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e8 e3       	ldi	r30, 0x38	; 56
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <DIO_enablePullup_pin+0xd6>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <DIO_enablePullup_pin+0xd2>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	6c c0       	rjmp	.+216    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTB,pin);
    16ce:	a8 e3       	ldi	r26, 0x38	; 56
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e8 e3       	ldi	r30, 0x38	; 56
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <DIO_enablePullup_pin+0xfe>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <DIO_enablePullup_pin+0xfa>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	57 c0       	rjmp	.+174    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'C':
		if(status==1)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <DIO_enablePullup_pin+0x138>
				{
					SET_BIT(PORTC,pin);
    16fe:	a5 e3       	ldi	r26, 0x35	; 53
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e5 e3       	ldi	r30, 0x35	; 53
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <DIO_enablePullup_pin+0x12e>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <DIO_enablePullup_pin+0x12a>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	40 c0       	rjmp	.+128    	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTC,pin);
    1726:	a5 e3       	ldi	r26, 0x35	; 53
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e5 e3       	ldi	r30, 0x35	; 53
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <DIO_enablePullup_pin+0x156>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <DIO_enablePullup_pin+0x152>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
    174e:	2b c0       	rjmp	.+86     	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
				}
				break;
	case 'D':
		if(status==1)
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	81 30       	cpi	r24, 0x01	; 1
    1754:	a1 f4       	brne	.+40     	; 0x177e <DIO_enablePullup_pin+0x190>
				{
					SET_BIT(PORTD,pin);
    1756:	a2 e3       	ldi	r26, 0x32	; 50
    1758:	b0 e0       	ldi	r27, 0x00	; 0
    175a:	e2 e3       	ldi	r30, 0x32	; 50
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	48 2f       	mov	r20, r24
    1762:	8a 81       	ldd	r24, Y+2	; 0x02
    1764:	28 2f       	mov	r18, r24
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	02 2e       	mov	r0, r18
    176e:	02 c0       	rjmp	.+4      	; 0x1774 <DIO_enablePullup_pin+0x186>
    1770:	88 0f       	add	r24, r24
    1772:	99 1f       	adc	r25, r25
    1774:	0a 94       	dec	r0
    1776:	e2 f7       	brpl	.-8      	; 0x1770 <DIO_enablePullup_pin+0x182>
    1778:	84 2b       	or	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	14 c0       	rjmp	.+40     	; 0x17a6 <DIO_enablePullup_pin+0x1b8>
				}
				else
				{
					CLEAR_BIT(PORTD,pin);
    177e:	a2 e3       	ldi	r26, 0x32	; 50
    1780:	b0 e0       	ldi	r27, 0x00	; 0
    1782:	e2 e3       	ldi	r30, 0x32	; 50
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	48 2f       	mov	r20, r24
    178a:	8a 81       	ldd	r24, Y+2	; 0x02
    178c:	28 2f       	mov	r18, r24
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	02 2e       	mov	r0, r18
    1796:	02 c0       	rjmp	.+4      	; 0x179c <DIO_enablePullup_pin+0x1ae>
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	0a 94       	dec	r0
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <DIO_enablePullup_pin+0x1aa>
    17a0:	80 95       	com	r24
    17a2:	84 23       	and	r24, r20
    17a4:	8c 93       	st	X, r24
				}
				break;
	}
}
    17a6:	0f 90       	pop	r0
    17a8:	0f 90       	pop	r0
    17aa:	0f 90       	pop	r0
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <DIO_write_low_nibble>:

void DIO_write_low_nibble(uint8 portname,uint8 value)
{
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <DIO_write_low_nibble+0x6>
    17bc:	00 d0       	rcall	.+0      	; 0x17be <DIO_write_low_nibble+0x8>
    17be:	cd b7       	in	r28, 0x3d	; 61
    17c0:	de b7       	in	r29, 0x3e	; 62
    17c2:	89 83       	std	Y+1, r24	; 0x01
    17c4:	6a 83       	std	Y+2, r22	; 0x02
	value&=0x0f;
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	8f 70       	andi	r24, 0x0F	; 15
    17ca:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    17cc:	89 81       	ldd	r24, Y+1	; 0x01
    17ce:	28 2f       	mov	r18, r24
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	3c 83       	std	Y+4, r19	; 0x04
    17d4:	2b 83       	std	Y+3, r18	; 0x03
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	82 34       	cpi	r24, 0x42	; 66
    17dc:	91 05       	cpc	r25, r1
    17de:	31 f1       	breq	.+76     	; 0x182c <DIO_write_low_nibble+0x76>
    17e0:	2b 81       	ldd	r18, Y+3	; 0x03
    17e2:	3c 81       	ldd	r19, Y+4	; 0x04
    17e4:	23 34       	cpi	r18, 0x43	; 67
    17e6:	31 05       	cpc	r19, r1
    17e8:	34 f4       	brge	.+12     	; 0x17f6 <DIO_write_low_nibble+0x40>
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	81 34       	cpi	r24, 0x41	; 65
    17f0:	91 05       	cpc	r25, r1
    17f2:	61 f0       	breq	.+24     	; 0x180c <DIO_write_low_nibble+0x56>
    17f4:	4a c0       	rjmp	.+148    	; 0x188a <DIO_write_low_nibble+0xd4>
    17f6:	2b 81       	ldd	r18, Y+3	; 0x03
    17f8:	3c 81       	ldd	r19, Y+4	; 0x04
    17fa:	23 34       	cpi	r18, 0x43	; 67
    17fc:	31 05       	cpc	r19, r1
    17fe:	31 f1       	breq	.+76     	; 0x184c <DIO_write_low_nibble+0x96>
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	84 34       	cpi	r24, 0x44	; 68
    1806:	91 05       	cpc	r25, r1
    1808:	89 f1       	breq	.+98     	; 0x186c <DIO_write_low_nibble+0xb6>
    180a:	3f c0       	rjmp	.+126    	; 0x188a <DIO_write_low_nibble+0xd4>
	{
	case 'A':
		PORTA&=0xf0;
    180c:	ab e3       	ldi	r26, 0x3B	; 59
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	eb e3       	ldi	r30, 0x3B	; 59
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	80 7f       	andi	r24, 0xF0	; 240
    1818:	8c 93       	st	X, r24
		PORTA|=value;
    181a:	ab e3       	ldi	r26, 0x3B	; 59
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	eb e3       	ldi	r30, 0x3B	; 59
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	90 81       	ld	r25, Z
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	89 2b       	or	r24, r25
    1828:	8c 93       	st	X, r24
    182a:	2f c0       	rjmp	.+94     	; 0x188a <DIO_write_low_nibble+0xd4>
		break;
	case 'B':
		PORTB&=0xf0;
    182c:	a8 e3       	ldi	r26, 0x38	; 56
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e8 e3       	ldi	r30, 0x38	; 56
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 7f       	andi	r24, 0xF0	; 240
    1838:	8c 93       	st	X, r24
		PORTA|=value;
    183a:	ab e3       	ldi	r26, 0x3B	; 59
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	eb e3       	ldi	r30, 0x3B	; 59
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	90 81       	ld	r25, Z
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	89 2b       	or	r24, r25
    1848:	8c 93       	st	X, r24
    184a:	1f c0       	rjmp	.+62     	; 0x188a <DIO_write_low_nibble+0xd4>
		break;
	case 'C':
		PORTC&=0xf0;
    184c:	a5 e3       	ldi	r26, 0x35	; 53
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	e5 e3       	ldi	r30, 0x35	; 53
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 7f       	andi	r24, 0xF0	; 240
    1858:	8c 93       	st	X, r24
		PORTA|=value;
    185a:	ab e3       	ldi	r26, 0x3B	; 59
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	eb e3       	ldi	r30, 0x3B	; 59
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	90 81       	ld	r25, Z
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	89 2b       	or	r24, r25
    1868:	8c 93       	st	X, r24
    186a:	0f c0       	rjmp	.+30     	; 0x188a <DIO_write_low_nibble+0xd4>
		break;
	case 'D':
		PORTD&=0xf0;
    186c:	a2 e3       	ldi	r26, 0x32	; 50
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	e2 e3       	ldi	r30, 0x32	; 50
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 81       	ld	r24, Z
    1876:	80 7f       	andi	r24, 0xF0	; 240
    1878:	8c 93       	st	X, r24
		PORTD|=value;
    187a:	a2 e3       	ldi	r26, 0x32	; 50
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	e2 e3       	ldi	r30, 0x32	; 50
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	90 81       	ld	r25, Z
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	89 2b       	or	r24, r25
    1888:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	cf 91       	pop	r28
    1894:	df 91       	pop	r29
    1896:	08 95       	ret

00001898 <DIO_set_low_nibble>:

void DIO_set_low_nibble(uint8 portname)
{
    1898:	df 93       	push	r29
    189a:	cf 93       	push	r28
    189c:	00 d0       	rcall	.+0      	; 0x189e <DIO_set_low_nibble+0x6>
    189e:	0f 92       	push	r0
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	3b 83       	std	Y+3, r19	; 0x03
    18ae:	2a 83       	std	Y+2, r18	; 0x02
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	82 34       	cpi	r24, 0x42	; 66
    18b6:	91 05       	cpc	r25, r1
    18b8:	f1 f0       	breq	.+60     	; 0x18f6 <DIO_set_low_nibble+0x5e>
    18ba:	2a 81       	ldd	r18, Y+2	; 0x02
    18bc:	3b 81       	ldd	r19, Y+3	; 0x03
    18be:	23 34       	cpi	r18, 0x43	; 67
    18c0:	31 05       	cpc	r19, r1
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <DIO_set_low_nibble+0x38>
    18c4:	8a 81       	ldd	r24, Y+2	; 0x02
    18c6:	9b 81       	ldd	r25, Y+3	; 0x03
    18c8:	81 34       	cpi	r24, 0x41	; 65
    18ca:	91 05       	cpc	r25, r1
    18cc:	61 f0       	breq	.+24     	; 0x18e6 <DIO_set_low_nibble+0x4e>
    18ce:	2a c0       	rjmp	.+84     	; 0x1924 <DIO_set_low_nibble+0x8c>
    18d0:	2a 81       	ldd	r18, Y+2	; 0x02
    18d2:	3b 81       	ldd	r19, Y+3	; 0x03
    18d4:	23 34       	cpi	r18, 0x43	; 67
    18d6:	31 05       	cpc	r19, r1
    18d8:	b1 f0       	breq	.+44     	; 0x1906 <DIO_set_low_nibble+0x6e>
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	9b 81       	ldd	r25, Y+3	; 0x03
    18de:	84 34       	cpi	r24, 0x44	; 68
    18e0:	91 05       	cpc	r25, r1
    18e2:	c9 f0       	breq	.+50     	; 0x1916 <DIO_set_low_nibble+0x7e>
    18e4:	1f c0       	rjmp	.+62     	; 0x1924 <DIO_set_low_nibble+0x8c>
	{
	case 'A':
		PORTA|=0x0f;
    18e6:	ab e3       	ldi	r26, 0x3B	; 59
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	eb e3       	ldi	r30, 0x3B	; 59
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 60       	ori	r24, 0x0F	; 15
    18f2:	8c 93       	st	X, r24
    18f4:	17 c0       	rjmp	.+46     	; 0x1924 <DIO_set_low_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0x0f;
    18f6:	a8 e3       	ldi	r26, 0x38	; 56
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	e8 e3       	ldi	r30, 0x38	; 56
    18fc:	f0 e0       	ldi	r31, 0x00	; 0
    18fe:	80 81       	ld	r24, Z
    1900:	8f 60       	ori	r24, 0x0F	; 15
    1902:	8c 93       	st	X, r24
    1904:	0f c0       	rjmp	.+30     	; 0x1924 <DIO_set_low_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0x0f;
    1906:	a5 e3       	ldi	r26, 0x35	; 53
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	e5 e3       	ldi	r30, 0x35	; 53
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	80 81       	ld	r24, Z
    1910:	8f 60       	ori	r24, 0x0F	; 15
    1912:	8c 93       	st	X, r24
    1914:	07 c0       	rjmp	.+14     	; 0x1924 <DIO_set_low_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0x0f;
    1916:	a2 e3       	ldi	r26, 0x32	; 50
    1918:	b0 e0       	ldi	r27, 0x00	; 0
    191a:	e2 e3       	ldi	r30, 0x32	; 50
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	8f 60       	ori	r24, 0x0F	; 15
    1922:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <DIO_clear_low_nibble>:

void DIO_clear_low_nibble(uint8 portname)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <DIO_clear_low_nibble+0x6>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    193e:	89 81       	ldd	r24, Y+1	; 0x01
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3b 83       	std	Y+3, r19	; 0x03
    1946:	2a 83       	std	Y+2, r18	; 0x02
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	82 34       	cpi	r24, 0x42	; 66
    194e:	91 05       	cpc	r25, r1
    1950:	f1 f0       	breq	.+60     	; 0x198e <DIO_clear_low_nibble+0x5e>
    1952:	2a 81       	ldd	r18, Y+2	; 0x02
    1954:	3b 81       	ldd	r19, Y+3	; 0x03
    1956:	23 34       	cpi	r18, 0x43	; 67
    1958:	31 05       	cpc	r19, r1
    195a:	34 f4       	brge	.+12     	; 0x1968 <DIO_clear_low_nibble+0x38>
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	9b 81       	ldd	r25, Y+3	; 0x03
    1960:	81 34       	cpi	r24, 0x41	; 65
    1962:	91 05       	cpc	r25, r1
    1964:	61 f0       	breq	.+24     	; 0x197e <DIO_clear_low_nibble+0x4e>
    1966:	2a c0       	rjmp	.+84     	; 0x19bc <DIO_clear_low_nibble+0x8c>
    1968:	2a 81       	ldd	r18, Y+2	; 0x02
    196a:	3b 81       	ldd	r19, Y+3	; 0x03
    196c:	23 34       	cpi	r18, 0x43	; 67
    196e:	31 05       	cpc	r19, r1
    1970:	b1 f0       	breq	.+44     	; 0x199e <DIO_clear_low_nibble+0x6e>
    1972:	8a 81       	ldd	r24, Y+2	; 0x02
    1974:	9b 81       	ldd	r25, Y+3	; 0x03
    1976:	84 34       	cpi	r24, 0x44	; 68
    1978:	91 05       	cpc	r25, r1
    197a:	c9 f0       	breq	.+50     	; 0x19ae <DIO_clear_low_nibble+0x7e>
    197c:	1f c0       	rjmp	.+62     	; 0x19bc <DIO_clear_low_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0x0f);
    197e:	ab e3       	ldi	r26, 0x3B	; 59
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	eb e3       	ldi	r30, 0x3B	; 59
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	80 7f       	andi	r24, 0xF0	; 240
    198a:	8c 93       	st	X, r24
    198c:	17 c0       	rjmp	.+46     	; 0x19bc <DIO_clear_low_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0x0f);
    198e:	a8 e3       	ldi	r26, 0x38	; 56
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e8 e3       	ldi	r30, 0x38	; 56
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	80 7f       	andi	r24, 0xF0	; 240
    199a:	8c 93       	st	X, r24
    199c:	0f c0       	rjmp	.+30     	; 0x19bc <DIO_clear_low_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0x0f);
    199e:	a5 e3       	ldi	r26, 0x35	; 53
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	e5 e3       	ldi	r30, 0x35	; 53
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	80 7f       	andi	r24, 0xF0	; 240
    19aa:	8c 93       	st	X, r24
    19ac:	07 c0       	rjmp	.+14     	; 0x19bc <DIO_clear_low_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0x0f);
    19ae:	a2 e3       	ldi	r26, 0x32	; 50
    19b0:	b0 e0       	ldi	r27, 0x00	; 0
    19b2:	e2 e3       	ldi	r30, 0x32	; 50
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	80 81       	ld	r24, Z
    19b8:	80 7f       	andi	r24, 0xF0	; 240
    19ba:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <DIO_set_high_nibble>:

void DIO_set_high_nibble(uint8 portname)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	00 d0       	rcall	.+0      	; 0x19ce <DIO_set_high_nibble+0x6>
    19ce:	0f 92       	push	r0
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
    19d4:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    19d6:	89 81       	ldd	r24, Y+1	; 0x01
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	3b 83       	std	Y+3, r19	; 0x03
    19de:	2a 83       	std	Y+2, r18	; 0x02
    19e0:	8a 81       	ldd	r24, Y+2	; 0x02
    19e2:	9b 81       	ldd	r25, Y+3	; 0x03
    19e4:	82 34       	cpi	r24, 0x42	; 66
    19e6:	91 05       	cpc	r25, r1
    19e8:	f1 f0       	breq	.+60     	; 0x1a26 <DIO_set_high_nibble+0x5e>
    19ea:	2a 81       	ldd	r18, Y+2	; 0x02
    19ec:	3b 81       	ldd	r19, Y+3	; 0x03
    19ee:	23 34       	cpi	r18, 0x43	; 67
    19f0:	31 05       	cpc	r19, r1
    19f2:	34 f4       	brge	.+12     	; 0x1a00 <DIO_set_high_nibble+0x38>
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	9b 81       	ldd	r25, Y+3	; 0x03
    19f8:	81 34       	cpi	r24, 0x41	; 65
    19fa:	91 05       	cpc	r25, r1
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <DIO_set_high_nibble+0x4e>
    19fe:	2a c0       	rjmp	.+84     	; 0x1a54 <DIO_set_high_nibble+0x8c>
    1a00:	2a 81       	ldd	r18, Y+2	; 0x02
    1a02:	3b 81       	ldd	r19, Y+3	; 0x03
    1a04:	23 34       	cpi	r18, 0x43	; 67
    1a06:	31 05       	cpc	r19, r1
    1a08:	b1 f0       	breq	.+44     	; 0x1a36 <DIO_set_high_nibble+0x6e>
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0e:	84 34       	cpi	r24, 0x44	; 68
    1a10:	91 05       	cpc	r25, r1
    1a12:	c9 f0       	breq	.+50     	; 0x1a46 <DIO_set_high_nibble+0x7e>
    1a14:	1f c0       	rjmp	.+62     	; 0x1a54 <DIO_set_high_nibble+0x8c>
	{
	case 'A':
		PORTA|=0xf0;
    1a16:	ab e3       	ldi	r26, 0x3B	; 59
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	eb e3       	ldi	r30, 0x3B	; 59
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	80 6f       	ori	r24, 0xF0	; 240
    1a22:	8c 93       	st	X, r24
    1a24:	17 c0       	rjmp	.+46     	; 0x1a54 <DIO_set_high_nibble+0x8c>
		break;
	case 'B':
		PORTB|=0xf0;
    1a26:	a8 e3       	ldi	r26, 0x38	; 56
    1a28:	b0 e0       	ldi	r27, 0x00	; 0
    1a2a:	e8 e3       	ldi	r30, 0x38	; 56
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	80 6f       	ori	r24, 0xF0	; 240
    1a32:	8c 93       	st	X, r24
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <DIO_set_high_nibble+0x8c>
		break;
	case 'C':
		PORTC|=0xf0;
    1a36:	a5 e3       	ldi	r26, 0x35	; 53
    1a38:	b0 e0       	ldi	r27, 0x00	; 0
    1a3a:	e5 e3       	ldi	r30, 0x35	; 53
    1a3c:	f0 e0       	ldi	r31, 0x00	; 0
    1a3e:	80 81       	ld	r24, Z
    1a40:	80 6f       	ori	r24, 0xF0	; 240
    1a42:	8c 93       	st	X, r24
    1a44:	07 c0       	rjmp	.+14     	; 0x1a54 <DIO_set_high_nibble+0x8c>
		break;
	case 'D':
		PORTD|=0xf0;
    1a46:	a2 e3       	ldi	r26, 0x32	; 50
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	e2 e3       	ldi	r30, 0x32	; 50
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	80 81       	ld	r24, Z
    1a50:	80 6f       	ori	r24, 0xF0	; 240
    1a52:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1a54:	0f 90       	pop	r0
    1a56:	0f 90       	pop	r0
    1a58:	0f 90       	pop	r0
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	08 95       	ret

00001a60 <DIO_clear_high_nibble>:

void DIO_clear_high_nibble(uint8 portname)
{
    1a60:	df 93       	push	r29
    1a62:	cf 93       	push	r28
    1a64:	00 d0       	rcall	.+0      	; 0x1a66 <DIO_clear_high_nibble+0x6>
    1a66:	0f 92       	push	r0
    1a68:	cd b7       	in	r28, 0x3d	; 61
    1a6a:	de b7       	in	r29, 0x3e	; 62
    1a6c:	89 83       	std	Y+1, r24	; 0x01
	switch(portname)
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	28 2f       	mov	r18, r24
    1a72:	30 e0       	ldi	r19, 0x00	; 0
    1a74:	3b 83       	std	Y+3, r19	; 0x03
    1a76:	2a 83       	std	Y+2, r18	; 0x02
    1a78:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a7c:	82 34       	cpi	r24, 0x42	; 66
    1a7e:	91 05       	cpc	r25, r1
    1a80:	f1 f0       	breq	.+60     	; 0x1abe <DIO_clear_high_nibble+0x5e>
    1a82:	2a 81       	ldd	r18, Y+2	; 0x02
    1a84:	3b 81       	ldd	r19, Y+3	; 0x03
    1a86:	23 34       	cpi	r18, 0x43	; 67
    1a88:	31 05       	cpc	r19, r1
    1a8a:	34 f4       	brge	.+12     	; 0x1a98 <DIO_clear_high_nibble+0x38>
    1a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a90:	81 34       	cpi	r24, 0x41	; 65
    1a92:	91 05       	cpc	r25, r1
    1a94:	61 f0       	breq	.+24     	; 0x1aae <DIO_clear_high_nibble+0x4e>
    1a96:	2a c0       	rjmp	.+84     	; 0x1aec <DIO_clear_high_nibble+0x8c>
    1a98:	2a 81       	ldd	r18, Y+2	; 0x02
    1a9a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a9c:	23 34       	cpi	r18, 0x43	; 67
    1a9e:	31 05       	cpc	r19, r1
    1aa0:	b1 f0       	breq	.+44     	; 0x1ace <DIO_clear_high_nibble+0x6e>
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa6:	84 34       	cpi	r24, 0x44	; 68
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	c9 f0       	breq	.+50     	; 0x1ade <DIO_clear_high_nibble+0x7e>
    1aac:	1f c0       	rjmp	.+62     	; 0x1aec <DIO_clear_high_nibble+0x8c>
	{
	case 'A':
		PORTA&=~(0xf0);
    1aae:	ab e3       	ldi	r26, 0x3B	; 59
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	eb e3       	ldi	r30, 0x3B	; 59
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 70       	andi	r24, 0x0F	; 15
    1aba:	8c 93       	st	X, r24
    1abc:	17 c0       	rjmp	.+46     	; 0x1aec <DIO_clear_high_nibble+0x8c>
		break;
	case 'B':
		PORTB&=~(0xf0);
    1abe:	a8 e3       	ldi	r26, 0x38	; 56
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e8 e3       	ldi	r30, 0x38	; 56
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	8f 70       	andi	r24, 0x0F	; 15
    1aca:	8c 93       	st	X, r24
    1acc:	0f c0       	rjmp	.+30     	; 0x1aec <DIO_clear_high_nibble+0x8c>
		break;
	case 'C':
		PORTC&=~(0xf0);
    1ace:	a5 e3       	ldi	r26, 0x35	; 53
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	e5 e3       	ldi	r30, 0x35	; 53
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	8f 70       	andi	r24, 0x0F	; 15
    1ada:	8c 93       	st	X, r24
    1adc:	07 c0       	rjmp	.+14     	; 0x1aec <DIO_clear_high_nibble+0x8c>
		break;
	case 'D':
		PORTD&=~(0xf0);
    1ade:	a2 e3       	ldi	r26, 0x32	; 50
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	e2 e3       	ldi	r30, 0x32	; 50
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	80 81       	ld	r24, Z
    1ae8:	8f 70       	andi	r24, 0x0F	; 15
    1aea:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1aec:	0f 90       	pop	r0
    1aee:	0f 90       	pop	r0
    1af0:	0f 90       	pop	r0
    1af2:	cf 91       	pop	r28
    1af4:	df 91       	pop	r29
    1af6:	08 95       	ret

00001af8 <DIO_write_high_nibble>:

void DIO_write_high_nibble(uint8 portname,uint8 value)
{
    1af8:	df 93       	push	r29
    1afa:	cf 93       	push	r28
    1afc:	00 d0       	rcall	.+0      	; 0x1afe <DIO_write_high_nibble+0x6>
    1afe:	00 d0       	rcall	.+0      	; 0x1b00 <DIO_write_high_nibble+0x8>
    1b00:	cd b7       	in	r28, 0x3d	; 61
    1b02:	de b7       	in	r29, 0x3e	; 62
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	6a 83       	std	Y+2, r22	; 0x02
	value<<=4;
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	82 95       	swap	r24
    1b0c:	80 7f       	andi	r24, 0xF0	; 240
    1b0e:	8a 83       	std	Y+2, r24	; 0x02
	switch(portname)
    1b10:	89 81       	ldd	r24, Y+1	; 0x01
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	3c 83       	std	Y+4, r19	; 0x04
    1b18:	2b 83       	std	Y+3, r18	; 0x03
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1e:	82 34       	cpi	r24, 0x42	; 66
    1b20:	91 05       	cpc	r25, r1
    1b22:	31 f1       	breq	.+76     	; 0x1b70 <DIO_write_high_nibble+0x78>
    1b24:	2b 81       	ldd	r18, Y+3	; 0x03
    1b26:	3c 81       	ldd	r19, Y+4	; 0x04
    1b28:	23 34       	cpi	r18, 0x43	; 67
    1b2a:	31 05       	cpc	r19, r1
    1b2c:	34 f4       	brge	.+12     	; 0x1b3a <DIO_write_high_nibble+0x42>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	81 34       	cpi	r24, 0x41	; 65
    1b34:	91 05       	cpc	r25, r1
    1b36:	61 f0       	breq	.+24     	; 0x1b50 <DIO_write_high_nibble+0x58>
    1b38:	4a c0       	rjmp	.+148    	; 0x1bce <DIO_write_high_nibble+0xd6>
    1b3a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b3e:	23 34       	cpi	r18, 0x43	; 67
    1b40:	31 05       	cpc	r19, r1
    1b42:	31 f1       	breq	.+76     	; 0x1b90 <DIO_write_high_nibble+0x98>
    1b44:	8b 81       	ldd	r24, Y+3	; 0x03
    1b46:	9c 81       	ldd	r25, Y+4	; 0x04
    1b48:	84 34       	cpi	r24, 0x44	; 68
    1b4a:	91 05       	cpc	r25, r1
    1b4c:	89 f1       	breq	.+98     	; 0x1bb0 <DIO_write_high_nibble+0xb8>
    1b4e:	3f c0       	rjmp	.+126    	; 0x1bce <DIO_write_high_nibble+0xd6>
	{
	case 'A':
		PORTA&=0x0f;
    1b50:	ab e3       	ldi	r26, 0x3B	; 59
    1b52:	b0 e0       	ldi	r27, 0x00	; 0
    1b54:	eb e3       	ldi	r30, 0x3B	; 59
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	8f 70       	andi	r24, 0x0F	; 15
    1b5c:	8c 93       	st	X, r24
		PORTA|=value;
    1b5e:	ab e3       	ldi	r26, 0x3B	; 59
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	eb e3       	ldi	r30, 0x3B	; 59
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	90 81       	ld	r25, Z
    1b68:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6a:	89 2b       	or	r24, r25
    1b6c:	8c 93       	st	X, r24
    1b6e:	2f c0       	rjmp	.+94     	; 0x1bce <DIO_write_high_nibble+0xd6>
		break;
	case 'B':
		PORTB&=0x0f;
    1b70:	a8 e3       	ldi	r26, 0x38	; 56
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	e8 e3       	ldi	r30, 0x38	; 56
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	8f 70       	andi	r24, 0x0F	; 15
    1b7c:	8c 93       	st	X, r24
		PORTA|=value;
    1b7e:	ab e3       	ldi	r26, 0x3B	; 59
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	eb e3       	ldi	r30, 0x3B	; 59
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	90 81       	ld	r25, Z
    1b88:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8a:	89 2b       	or	r24, r25
    1b8c:	8c 93       	st	X, r24
    1b8e:	1f c0       	rjmp	.+62     	; 0x1bce <DIO_write_high_nibble+0xd6>
		break;
	case 'C':
		PORTC&=0x0f;
    1b90:	a5 e3       	ldi	r26, 0x35	; 53
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e5 e3       	ldi	r30, 0x35	; 53
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	8f 70       	andi	r24, 0x0F	; 15
    1b9c:	8c 93       	st	X, r24
		PORTA|=value;
    1b9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	90 81       	ld	r25, Z
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	89 2b       	or	r24, r25
    1bac:	8c 93       	st	X, r24
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <DIO_write_high_nibble+0xd6>
		break;
	case 'D':
		PORTD&=0x0f;
    1bb0:	a2 e3       	ldi	r26, 0x32	; 50
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	e2 e3       	ldi	r30, 0x32	; 50
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	8f 70       	andi	r24, 0x0F	; 15
    1bbc:	8c 93       	st	X, r24
		PORTD|=value;
    1bbe:	a2 e3       	ldi	r26, 0x32	; 50
    1bc0:	b0 e0       	ldi	r27, 0x00	; 0
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	90 81       	ld	r25, Z
    1bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bca:	89 2b       	or	r24, r25
    1bcc:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <DIO_write_high_nibbleDir>:

void DIO_write_high_nibbleDir(uint8 portname,uint8 direction)
{
    1bdc:	df 93       	push	r29
    1bde:	cf 93       	push	r28
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <DIO_write_high_nibbleDir+0x6>
    1be2:	00 d0       	rcall	.+0      	; 0x1be4 <DIO_write_high_nibbleDir+0x8>
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1bec:	89 81       	ldd	r24, Y+1	; 0x01
    1bee:	28 2f       	mov	r18, r24
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	3c 83       	std	Y+4, r19	; 0x04
    1bf4:	2b 83       	std	Y+3, r18	; 0x03
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	82 34       	cpi	r24, 0x42	; 66
    1bfc:	91 05       	cpc	r25, r1
    1bfe:	49 f1       	breq	.+82     	; 0x1c52 <DIO_write_high_nibbleDir+0x76>
    1c00:	2b 81       	ldd	r18, Y+3	; 0x03
    1c02:	3c 81       	ldd	r19, Y+4	; 0x04
    1c04:	23 34       	cpi	r18, 0x43	; 67
    1c06:	31 05       	cpc	r19, r1
    1c08:	34 f4       	brge	.+12     	; 0x1c16 <DIO_write_high_nibbleDir+0x3a>
    1c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c0e:	81 34       	cpi	r24, 0x41	; 65
    1c10:	91 05       	cpc	r25, r1
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <DIO_write_high_nibbleDir+0x50>
    1c14:	56 c0       	rjmp	.+172    	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	23 34       	cpi	r18, 0x43	; 67
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	61 f1       	breq	.+88     	; 0x1c78 <DIO_write_high_nibbleDir+0x9c>
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	84 34       	cpi	r24, 0x44	; 68
    1c26:	91 05       	cpc	r25, r1
    1c28:	d1 f1       	breq	.+116    	; 0x1c9e <DIO_write_high_nibbleDir+0xc2>
    1c2a:	4b c0       	rjmp	.+150    	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2e:	81 30       	cpi	r24, 0x01	; 1
    1c30:	41 f4       	brne	.+16     	; 0x1c42 <DIO_write_high_nibbleDir+0x66>
			DDRA|=0xf0;
    1c32:	aa e3       	ldi	r26, 0x3A	; 58
    1c34:	b0 e0       	ldi	r27, 0x00	; 0
    1c36:	ea e3       	ldi	r30, 0x3A	; 58
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	80 6f       	ori	r24, 0xF0	; 240
    1c3e:	8c 93       	st	X, r24
    1c40:	40 c0       	rjmp	.+128    	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRA&=~(0xf0);
    1c42:	aa e3       	ldi	r26, 0x3A	; 58
    1c44:	b0 e0       	ldi	r27, 0x00	; 0
    1c46:	ea e3       	ldi	r30, 0x3A	; 58
    1c48:	f0 e0       	ldi	r31, 0x00	; 0
    1c4a:	80 81       	ld	r24, Z
    1c4c:	8f 70       	andi	r24, 0x0F	; 15
    1c4e:	8c 93       	st	X, r24
    1c50:	38 c0       	rjmp	.+112    	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	41 f4       	brne	.+16     	; 0x1c68 <DIO_write_high_nibbleDir+0x8c>
			DDRB|=0xf0;
    1c58:	a7 e3       	ldi	r26, 0x37	; 55
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e7 e3       	ldi	r30, 0x37	; 55
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	80 6f       	ori	r24, 0xF0	; 240
    1c64:	8c 93       	st	X, r24
    1c66:	2d c0       	rjmp	.+90     	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRB&=~(0xf0);
    1c68:	a7 e3       	ldi	r26, 0x37	; 55
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e7 e3       	ldi	r30, 0x37	; 55
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	8f 70       	andi	r24, 0x0F	; 15
    1c74:	8c 93       	st	X, r24
    1c76:	25 c0       	rjmp	.+74     	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1c78:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7a:	81 30       	cpi	r24, 0x01	; 1
    1c7c:	41 f4       	brne	.+16     	; 0x1c8e <DIO_write_high_nibbleDir+0xb2>
			DDRC|=0xf0;
    1c7e:	a4 e3       	ldi	r26, 0x34	; 52
    1c80:	b0 e0       	ldi	r27, 0x00	; 0
    1c82:	e4 e3       	ldi	r30, 0x34	; 52
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	80 6f       	ori	r24, 0xF0	; 240
    1c8a:	8c 93       	st	X, r24
    1c8c:	1a c0       	rjmp	.+52     	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRC&=~(0xf0);
    1c8e:	a4 e3       	ldi	r26, 0x34	; 52
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	e4 e3       	ldi	r30, 0x34	; 52
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	8f 70       	andi	r24, 0x0F	; 15
    1c9a:	8c 93       	st	X, r24
    1c9c:	12 c0       	rjmp	.+36     	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	81 30       	cpi	r24, 0x01	; 1
    1ca2:	41 f4       	brne	.+16     	; 0x1cb4 <DIO_write_high_nibbleDir+0xd8>
			DDRD|=0xf0;
    1ca4:	a1 e3       	ldi	r26, 0x31	; 49
    1ca6:	b0 e0       	ldi	r27, 0x00	; 0
    1ca8:	e1 e3       	ldi	r30, 0x31	; 49
    1caa:	f0 e0       	ldi	r31, 0x00	; 0
    1cac:	80 81       	ld	r24, Z
    1cae:	80 6f       	ori	r24, 0xF0	; 240
    1cb0:	8c 93       	st	X, r24
    1cb2:	07 c0       	rjmp	.+14     	; 0x1cc2 <DIO_write_high_nibbleDir+0xe6>
		else
			DDRD&=~(0xf0);
    1cb4:	a1 e3       	ldi	r26, 0x31	; 49
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	e1 e3       	ldi	r30, 0x31	; 49
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	8f 70       	andi	r24, 0x0F	; 15
    1cc0:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	08 95       	ret

00001cd0 <DIO_write_low_nibbleDir>:

void DIO_write_low_nibbleDir(uint8 portname,uint8 direction)
{
    1cd0:	df 93       	push	r29
    1cd2:	cf 93       	push	r28
    1cd4:	00 d0       	rcall	.+0      	; 0x1cd6 <DIO_write_low_nibbleDir+0x6>
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <DIO_write_low_nibbleDir+0x8>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	89 83       	std	Y+1, r24	; 0x01
    1cde:	6a 83       	std	Y+2, r22	; 0x02
	switch(portname)
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	3c 83       	std	Y+4, r19	; 0x04
    1ce8:	2b 83       	std	Y+3, r18	; 0x03
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	82 34       	cpi	r24, 0x42	; 66
    1cf0:	91 05       	cpc	r25, r1
    1cf2:	49 f1       	breq	.+82     	; 0x1d46 <DIO_write_low_nibbleDir+0x76>
    1cf4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cf6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cf8:	23 34       	cpi	r18, 0x43	; 67
    1cfa:	31 05       	cpc	r19, r1
    1cfc:	34 f4       	brge	.+12     	; 0x1d0a <DIO_write_low_nibbleDir+0x3a>
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	9c 81       	ldd	r25, Y+4	; 0x04
    1d02:	81 34       	cpi	r24, 0x41	; 65
    1d04:	91 05       	cpc	r25, r1
    1d06:	61 f0       	breq	.+24     	; 0x1d20 <DIO_write_low_nibbleDir+0x50>
    1d08:	56 c0       	rjmp	.+172    	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
    1d0a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d0c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d0e:	23 34       	cpi	r18, 0x43	; 67
    1d10:	31 05       	cpc	r19, r1
    1d12:	61 f1       	breq	.+88     	; 0x1d6c <DIO_write_low_nibbleDir+0x9c>
    1d14:	8b 81       	ldd	r24, Y+3	; 0x03
    1d16:	9c 81       	ldd	r25, Y+4	; 0x04
    1d18:	84 34       	cpi	r24, 0x44	; 68
    1d1a:	91 05       	cpc	r25, r1
    1d1c:	d1 f1       	breq	.+116    	; 0x1d92 <DIO_write_low_nibbleDir+0xc2>
    1d1e:	4b c0       	rjmp	.+150    	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
	{
	case 'A':
		if(direction==1)
    1d20:	8a 81       	ldd	r24, Y+2	; 0x02
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	41 f4       	brne	.+16     	; 0x1d36 <DIO_write_low_nibbleDir+0x66>
			DDRA|=0x0f;
    1d26:	aa e3       	ldi	r26, 0x3A	; 58
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	ea e3       	ldi	r30, 0x3A	; 58
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	8f 60       	ori	r24, 0x0F	; 15
    1d32:	8c 93       	st	X, r24
    1d34:	40 c0       	rjmp	.+128    	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRA&=~(0x0f);
    1d36:	aa e3       	ldi	r26, 0x3A	; 58
    1d38:	b0 e0       	ldi	r27, 0x00	; 0
    1d3a:	ea e3       	ldi	r30, 0x3A	; 58
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	80 81       	ld	r24, Z
    1d40:	80 7f       	andi	r24, 0xF0	; 240
    1d42:	8c 93       	st	X, r24
    1d44:	38 c0       	rjmp	.+112    	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'B':
		if(direction==1)
    1d46:	8a 81       	ldd	r24, Y+2	; 0x02
    1d48:	81 30       	cpi	r24, 0x01	; 1
    1d4a:	41 f4       	brne	.+16     	; 0x1d5c <DIO_write_low_nibbleDir+0x8c>
			DDRB|=0x0f;
    1d4c:	a7 e3       	ldi	r26, 0x37	; 55
    1d4e:	b0 e0       	ldi	r27, 0x00	; 0
    1d50:	e7 e3       	ldi	r30, 0x37	; 55
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	80 81       	ld	r24, Z
    1d56:	8f 60       	ori	r24, 0x0F	; 15
    1d58:	8c 93       	st	X, r24
    1d5a:	2d c0       	rjmp	.+90     	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRB&=~(0x0f);
    1d5c:	a7 e3       	ldi	r26, 0x37	; 55
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e7 e3       	ldi	r30, 0x37	; 55
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	80 7f       	andi	r24, 0xF0	; 240
    1d68:	8c 93       	st	X, r24
    1d6a:	25 c0       	rjmp	.+74     	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'C':
		if(direction==1)
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	81 30       	cpi	r24, 0x01	; 1
    1d70:	41 f4       	brne	.+16     	; 0x1d82 <DIO_write_low_nibbleDir+0xb2>
			DDRC|=0x0f;
    1d72:	a4 e3       	ldi	r26, 0x34	; 52
    1d74:	b0 e0       	ldi	r27, 0x00	; 0
    1d76:	e4 e3       	ldi	r30, 0x34	; 52
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	8f 60       	ori	r24, 0x0F	; 15
    1d7e:	8c 93       	st	X, r24
    1d80:	1a c0       	rjmp	.+52     	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRC&=~(0x0f);
    1d82:	a4 e3       	ldi	r26, 0x34	; 52
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	e4 e3       	ldi	r30, 0x34	; 52
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	80 7f       	andi	r24, 0xF0	; 240
    1d8e:	8c 93       	st	X, r24
    1d90:	12 c0       	rjmp	.+36     	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		break;
	case 'D':
		if(direction==1)
    1d92:	8a 81       	ldd	r24, Y+2	; 0x02
    1d94:	81 30       	cpi	r24, 0x01	; 1
    1d96:	41 f4       	brne	.+16     	; 0x1da8 <DIO_write_low_nibbleDir+0xd8>
			DDRD|=0x0f;
    1d98:	a1 e3       	ldi	r26, 0x31	; 49
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	e1 e3       	ldi	r30, 0x31	; 49
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	8f 60       	ori	r24, 0x0F	; 15
    1da4:	8c 93       	st	X, r24
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <DIO_write_low_nibbleDir+0xe6>
		else
			DDRD&=~(0x0f);
    1da8:	a1 e3       	ldi	r26, 0x31	; 49
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e1 e3       	ldi	r30, 0x31	; 49
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	80 81       	ld	r24, Z
    1db2:	80 7f       	andi	r24, 0xF0	; 240
    1db4:	8c 93       	st	X, r24
		break;
	default: break;
	}
}
    1db6:	0f 90       	pop	r0
    1db8:	0f 90       	pop	r0
    1dba:	0f 90       	pop	r0
    1dbc:	0f 90       	pop	r0
    1dbe:	cf 91       	pop	r28
    1dc0:	df 91       	pop	r29
    1dc2:	08 95       	ret

00001dc4 <LCD_refresh>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_refresh(void)
{
    1dc4:	df 93       	push	r29
    1dc6:	cf 93       	push	r28
    1dc8:	cd b7       	in	r28, 0x3d	; 61
    1dca:	de b7       	in	r29, 0x3e	; 62
    1dcc:	aa 97       	sbiw	r28, 0x2a	; 42
    1dce:	0f b6       	in	r0, 0x3f	; 63
    1dd0:	f8 94       	cli
    1dd2:	de bf       	out	0x3e, r29	; 62
    1dd4:	0f be       	out	0x3f, r0	; 63
    1dd6:	cd bf       	out	0x3d, r28	; 61
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	a0 e8       	ldi	r26, 0x80	; 128
    1dde:	bf e3       	ldi	r27, 0x3F	; 63
    1de0:	8f a3       	std	Y+39, r24	; 0x27
    1de2:	98 a7       	std	Y+40, r25	; 0x28
    1de4:	a9 a7       	std	Y+41, r26	; 0x29
    1de6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1de8:	6f a1       	ldd	r22, Y+39	; 0x27
    1dea:	78 a5       	ldd	r23, Y+40	; 0x28
    1dec:	89 a5       	ldd	r24, Y+41	; 0x29
    1dee:	9a a5       	ldd	r25, Y+42	; 0x2a
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	4a e7       	ldi	r20, 0x7A	; 122
    1df6:	53 e4       	ldi	r21, 0x43	; 67
    1df8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	cb 01       	movw	r24, r22
    1e00:	8b a3       	std	Y+35, r24	; 0x23
    1e02:	9c a3       	std	Y+36, r25	; 0x24
    1e04:	ad a3       	std	Y+37, r26	; 0x25
    1e06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e08:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	5f e3       	ldi	r21, 0x3F	; 63
    1e18:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e1c:	88 23       	and	r24, r24
    1e1e:	2c f4       	brge	.+10     	; 0x1e2a <LCD_refresh+0x66>
		__ticks = 1;
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	9a a3       	std	Y+34, r25	; 0x22
    1e26:	89 a3       	std	Y+33, r24	; 0x21
    1e28:	3f c0       	rjmp	.+126    	; 0x1ea8 <LCD_refresh+0xe4>
	else if (__tmp > 65535)
    1e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    1e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    1e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    1e30:	9e a1       	ldd	r25, Y+38	; 0x26
    1e32:	20 e0       	ldi	r18, 0x00	; 0
    1e34:	3f ef       	ldi	r19, 0xFF	; 255
    1e36:	4f e7       	ldi	r20, 0x7F	; 127
    1e38:	57 e4       	ldi	r21, 0x47	; 71
    1e3a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e3e:	18 16       	cp	r1, r24
    1e40:	4c f5       	brge	.+82     	; 0x1e94 <LCD_refresh+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e42:	6f a1       	ldd	r22, Y+39	; 0x27
    1e44:	78 a5       	ldd	r23, Y+40	; 0x28
    1e46:	89 a5       	ldd	r24, Y+41	; 0x29
    1e48:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e4a:	20 e0       	ldi	r18, 0x00	; 0
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	40 e2       	ldi	r20, 0x20	; 32
    1e50:	51 e4       	ldi	r21, 0x41	; 65
    1e52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	bc 01       	movw	r22, r24
    1e5c:	cd 01       	movw	r24, r26
    1e5e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e62:	dc 01       	movw	r26, r24
    1e64:	cb 01       	movw	r24, r22
    1e66:	9a a3       	std	Y+34, r25	; 0x22
    1e68:	89 a3       	std	Y+33, r24	; 0x21
    1e6a:	0f c0       	rjmp	.+30     	; 0x1e8a <LCD_refresh+0xc6>
    1e6c:	89 e1       	ldi	r24, 0x19	; 25
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	98 a3       	std	Y+32, r25	; 0x20
    1e72:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e76:	98 a1       	ldd	r25, Y+32	; 0x20
    1e78:	01 97       	sbiw	r24, 0x01	; 1
    1e7a:	f1 f7       	brne	.-4      	; 0x1e78 <LCD_refresh+0xb4>
    1e7c:	98 a3       	std	Y+32, r25	; 0x20
    1e7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e80:	89 a1       	ldd	r24, Y+33	; 0x21
    1e82:	9a a1       	ldd	r25, Y+34	; 0x22
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	9a a3       	std	Y+34, r25	; 0x22
    1e88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	69 f7       	brne	.-38     	; 0x1e6c <LCD_refresh+0xa8>
    1e92:	14 c0       	rjmp	.+40     	; 0x1ebc <LCD_refresh+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e94:	6b a1       	ldd	r22, Y+35	; 0x23
    1e96:	7c a1       	ldd	r23, Y+36	; 0x24
    1e98:	8d a1       	ldd	r24, Y+37	; 0x25
    1e9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ea0:	dc 01       	movw	r26, r24
    1ea2:	cb 01       	movw	r24, r22
    1ea4:	9a a3       	std	Y+34, r25	; 0x22
    1ea6:	89 a3       	std	Y+33, r24	; 0x21
    1ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1eac:	9e 8f       	std	Y+30, r25	; 0x1e
    1eae:	8d 8f       	std	Y+29, r24	; 0x1d
    1eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1eb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <LCD_refresh+0xf0>
    1eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    1eba:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    1ebc:	83 e4       	ldi	r24, 0x43	; 67
    1ebe:	62 e0       	ldi	r22, 0x02	; 2
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	a0 e8       	ldi	r26, 0x80	; 128
    1ecc:	bf e3       	ldi	r27, 0x3F	; 63
    1ece:	89 8f       	std	Y+25, r24	; 0x19
    1ed0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ed2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ed4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ed8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1eda:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1edc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	4a e7       	ldi	r20, 0x7A	; 122
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1eea:	dc 01       	movw	r26, r24
    1eec:	cb 01       	movw	r24, r22
    1eee:	8d 8b       	std	Y+21, r24	; 0x15
    1ef0:	9e 8b       	std	Y+22, r25	; 0x16
    1ef2:	af 8b       	std	Y+23, r26	; 0x17
    1ef4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ef6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ef8:	7e 89       	ldd	r23, Y+22	; 0x16
    1efa:	8f 89       	ldd	r24, Y+23	; 0x17
    1efc:	98 8d       	ldd	r25, Y+24	; 0x18
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e8       	ldi	r20, 0x80	; 128
    1f04:	5f e3       	ldi	r21, 0x3F	; 63
    1f06:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1f0a:	88 23       	and	r24, r24
    1f0c:	2c f4       	brge	.+10     	; 0x1f18 <LCD_refresh+0x154>
		__ticks = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	9c 8b       	std	Y+20, r25	; 0x14
    1f14:	8b 8b       	std	Y+19, r24	; 0x13
    1f16:	3f c0       	rjmp	.+126    	; 0x1f96 <LCD_refresh+0x1d2>
	else if (__tmp > 65535)
    1f18:	6d 89       	ldd	r22, Y+21	; 0x15
    1f1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	3f ef       	ldi	r19, 0xFF	; 255
    1f24:	4f e7       	ldi	r20, 0x7F	; 127
    1f26:	57 e4       	ldi	r21, 0x47	; 71
    1f28:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f2c:	18 16       	cp	r1, r24
    1f2e:	4c f5       	brge	.+82     	; 0x1f82 <LCD_refresh+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f30:	69 8d       	ldd	r22, Y+25	; 0x19
    1f32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	40 e2       	ldi	r20, 0x20	; 32
    1f3e:	51 e4       	ldi	r21, 0x41	; 65
    1f40:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	bc 01       	movw	r22, r24
    1f4a:	cd 01       	movw	r24, r26
    1f4c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f50:	dc 01       	movw	r26, r24
    1f52:	cb 01       	movw	r24, r22
    1f54:	9c 8b       	std	Y+20, r25	; 0x14
    1f56:	8b 8b       	std	Y+19, r24	; 0x13
    1f58:	0f c0       	rjmp	.+30     	; 0x1f78 <LCD_refresh+0x1b4>
    1f5a:	89 e1       	ldi	r24, 0x19	; 25
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	9a 8b       	std	Y+18, r25	; 0x12
    1f60:	89 8b       	std	Y+17, r24	; 0x11
    1f62:	89 89       	ldd	r24, Y+17	; 0x11
    1f64:	9a 89       	ldd	r25, Y+18	; 0x12
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	f1 f7       	brne	.-4      	; 0x1f66 <LCD_refresh+0x1a2>
    1f6a:	9a 8b       	std	Y+18, r25	; 0x12
    1f6c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f70:	9c 89       	ldd	r25, Y+20	; 0x14
    1f72:	01 97       	sbiw	r24, 0x01	; 1
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f78:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f7c:	00 97       	sbiw	r24, 0x00	; 0
    1f7e:	69 f7       	brne	.-38     	; 0x1f5a <LCD_refresh+0x196>
    1f80:	14 c0       	rjmp	.+40     	; 0x1faa <LCD_refresh+0x1e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f82:	6d 89       	ldd	r22, Y+21	; 0x15
    1f84:	7e 89       	ldd	r23, Y+22	; 0x16
    1f86:	8f 89       	ldd	r24, Y+23	; 0x17
    1f88:	98 8d       	ldd	r25, Y+24	; 0x18
    1f8a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	9c 8b       	std	Y+20, r25	; 0x14
    1f94:	8b 8b       	std	Y+19, r24	; 0x13
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	98 8b       	std	Y+16, r25	; 0x10
    1f9c:	8f 87       	std	Y+15, r24	; 0x0f
    1f9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fa0:	98 89       	ldd	r25, Y+16	; 0x10
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <LCD_refresh+0x1de>
    1fa6:	98 8b       	std	Y+16, r25	; 0x10
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    1faa:	83 e4       	ldi	r24, 0x43	; 67
    1fac:	62 e0       	ldi	r22, 0x02	; 2
    1fae:	41 e0       	ldi	r20, 0x01	; 1
    1fb0:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	a0 e8       	ldi	r26, 0x80	; 128
    1fba:	bf e3       	ldi	r27, 0x3F	; 63
    1fbc:	8b 87       	std	Y+11, r24	; 0x0b
    1fbe:	9c 87       	std	Y+12, r25	; 0x0c
    1fc0:	ad 87       	std	Y+13, r26	; 0x0d
    1fc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fc6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fc8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	4a e7       	ldi	r20, 0x7A	; 122
    1fd2:	53 e4       	ldi	r21, 0x43	; 67
    1fd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fd8:	dc 01       	movw	r26, r24
    1fda:	cb 01       	movw	r24, r22
    1fdc:	8f 83       	std	Y+7, r24	; 0x07
    1fde:	98 87       	std	Y+8, r25	; 0x08
    1fe0:	a9 87       	std	Y+9, r26	; 0x09
    1fe2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fe6:	78 85       	ldd	r23, Y+8	; 0x08
    1fe8:	89 85       	ldd	r24, Y+9	; 0x09
    1fea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	5f e3       	ldi	r21, 0x3F	; 63
    1ff4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ff8:	88 23       	and	r24, r24
    1ffa:	2c f4       	brge	.+10     	; 0x2006 <LCD_refresh+0x242>
		__ticks = 1;
    1ffc:	81 e0       	ldi	r24, 0x01	; 1
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	3f c0       	rjmp	.+126    	; 0x2084 <LCD_refresh+0x2c0>
	else if (__tmp > 65535)
    2006:	6f 81       	ldd	r22, Y+7	; 0x07
    2008:	78 85       	ldd	r23, Y+8	; 0x08
    200a:	89 85       	ldd	r24, Y+9	; 0x09
    200c:	9a 85       	ldd	r25, Y+10	; 0x0a
    200e:	20 e0       	ldi	r18, 0x00	; 0
    2010:	3f ef       	ldi	r19, 0xFF	; 255
    2012:	4f e7       	ldi	r20, 0x7F	; 127
    2014:	57 e4       	ldi	r21, 0x47	; 71
    2016:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    201a:	18 16       	cp	r1, r24
    201c:	4c f5       	brge	.+82     	; 0x2070 <LCD_refresh+0x2ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2020:	7c 85       	ldd	r23, Y+12	; 0x0c
    2022:	8d 85       	ldd	r24, Y+13	; 0x0d
    2024:	9e 85       	ldd	r25, Y+14	; 0x0e
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	bc 01       	movw	r22, r24
    2038:	cd 01       	movw	r24, r26
    203a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	9e 83       	std	Y+6, r25	; 0x06
    2044:	8d 83       	std	Y+5, r24	; 0x05
    2046:	0f c0       	rjmp	.+30     	; 0x2066 <LCD_refresh+0x2a2>
    2048:	89 e1       	ldi	r24, 0x19	; 25
    204a:	90 e0       	ldi	r25, 0x00	; 0
    204c:	9c 83       	std	Y+4, r25	; 0x04
    204e:	8b 83       	std	Y+3, r24	; 0x03
    2050:	8b 81       	ldd	r24, Y+3	; 0x03
    2052:	9c 81       	ldd	r25, Y+4	; 0x04
    2054:	01 97       	sbiw	r24, 0x01	; 1
    2056:	f1 f7       	brne	.-4      	; 0x2054 <LCD_refresh+0x290>
    2058:	9c 83       	std	Y+4, r25	; 0x04
    205a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205c:	8d 81       	ldd	r24, Y+5	; 0x05
    205e:	9e 81       	ldd	r25, Y+6	; 0x06
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	00 97       	sbiw	r24, 0x00	; 0
    206c:	69 f7       	brne	.-38     	; 0x2048 <LCD_refresh+0x284>
    206e:	14 c0       	rjmp	.+40     	; 0x2098 <LCD_refresh+0x2d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2070:	6f 81       	ldd	r22, Y+7	; 0x07
    2072:	78 85       	ldd	r23, Y+8	; 0x08
    2074:	89 85       	ldd	r24, Y+9	; 0x09
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	9a 83       	std	Y+2, r25	; 0x02
    208a:	89 83       	std	Y+1, r24	; 0x01
    208c:	89 81       	ldd	r24, Y+1	; 0x01
    208e:	9a 81       	ldd	r25, Y+2	; 0x02
    2090:	01 97       	sbiw	r24, 0x01	; 1
    2092:	f1 f7       	brne	.-4      	; 0x2090 <LCD_refresh+0x2cc>
    2094:	9a 83       	std	Y+2, r25	; 0x02
    2096:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2098:	aa 96       	adiw	r28, 0x2a	; 42
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	08 95       	ret

000020aa <LCD_Command>:
void LCD_Command(uint8 cmd)
{
    20aa:	df 93       	push	r29
    20ac:	cf 93       	push	r28
    20ae:	cd b7       	in	r28, 0x3d	; 61
    20b0:	de b7       	in	r29, 0x3e	; 62
    20b2:	e9 97       	sbiw	r28, 0x39	; 57
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,0);
    20c0:	83 e4       	ldi	r24, 0x43	; 67
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	40 e0       	ldi	r20, 0x00	; 0
    20c6:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	a0 e8       	ldi	r26, 0x80	; 128
    20d0:	bf e3       	ldi	r27, 0x3F	; 63
    20d2:	8d ab       	std	Y+53, r24	; 0x35
    20d4:	9e ab       	std	Y+54, r25	; 0x36
    20d6:	af ab       	std	Y+55, r26	; 0x37
    20d8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20da:	6d a9       	ldd	r22, Y+53	; 0x35
    20dc:	7e a9       	ldd	r23, Y+54	; 0x36
    20de:	8f a9       	ldd	r24, Y+55	; 0x37
    20e0:	98 ad       	ldd	r25, Y+56	; 0x38
    20e2:	20 e0       	ldi	r18, 0x00	; 0
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	4a e7       	ldi	r20, 0x7A	; 122
    20e8:	53 e4       	ldi	r21, 0x43	; 67
    20ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20ee:	dc 01       	movw	r26, r24
    20f0:	cb 01       	movw	r24, r22
    20f2:	89 ab       	std	Y+49, r24	; 0x31
    20f4:	9a ab       	std	Y+50, r25	; 0x32
    20f6:	ab ab       	std	Y+51, r26	; 0x33
    20f8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20fa:	69 a9       	ldd	r22, Y+49	; 0x31
    20fc:	7a a9       	ldd	r23, Y+50	; 0x32
    20fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2100:	9c a9       	ldd	r25, Y+52	; 0x34
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e0       	ldi	r19, 0x00	; 0
    2106:	40 e8       	ldi	r20, 0x80	; 128
    2108:	5f e3       	ldi	r21, 0x3F	; 63
    210a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    210e:	88 23       	and	r24, r24
    2110:	2c f4       	brge	.+10     	; 0x211c <LCD_Command+0x72>
		__ticks = 1;
    2112:	81 e0       	ldi	r24, 0x01	; 1
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	98 ab       	std	Y+48, r25	; 0x30
    2118:	8f a7       	std	Y+47, r24	; 0x2f
    211a:	3f c0       	rjmp	.+126    	; 0x219a <LCD_Command+0xf0>
	else if (__tmp > 65535)
    211c:	69 a9       	ldd	r22, Y+49	; 0x31
    211e:	7a a9       	ldd	r23, Y+50	; 0x32
    2120:	8b a9       	ldd	r24, Y+51	; 0x33
    2122:	9c a9       	ldd	r25, Y+52	; 0x34
    2124:	20 e0       	ldi	r18, 0x00	; 0
    2126:	3f ef       	ldi	r19, 0xFF	; 255
    2128:	4f e7       	ldi	r20, 0x7F	; 127
    212a:	57 e4       	ldi	r21, 0x47	; 71
    212c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2130:	18 16       	cp	r1, r24
    2132:	4c f5       	brge	.+82     	; 0x2186 <LCD_Command+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2134:	6d a9       	ldd	r22, Y+53	; 0x35
    2136:	7e a9       	ldd	r23, Y+54	; 0x36
    2138:	8f a9       	ldd	r24, Y+55	; 0x37
    213a:	98 ad       	ldd	r25, Y+56	; 0x38
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e2       	ldi	r20, 0x20	; 32
    2142:	51 e4       	ldi	r21, 0x41	; 65
    2144:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	bc 01       	movw	r22, r24
    214e:	cd 01       	movw	r24, r26
    2150:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	98 ab       	std	Y+48, r25	; 0x30
    215a:	8f a7       	std	Y+47, r24	; 0x2f
    215c:	0f c0       	rjmp	.+30     	; 0x217c <LCD_Command+0xd2>
    215e:	89 e1       	ldi	r24, 0x19	; 25
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9e a7       	std	Y+46, r25	; 0x2e
    2164:	8d a7       	std	Y+45, r24	; 0x2d
    2166:	8d a5       	ldd	r24, Y+45	; 0x2d
    2168:	9e a5       	ldd	r25, Y+46	; 0x2e
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	f1 f7       	brne	.-4      	; 0x216a <LCD_Command+0xc0>
    216e:	9e a7       	std	Y+46, r25	; 0x2e
    2170:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2172:	8f a5       	ldd	r24, Y+47	; 0x2f
    2174:	98 a9       	ldd	r25, Y+48	; 0x30
    2176:	01 97       	sbiw	r24, 0x01	; 1
    2178:	98 ab       	std	Y+48, r25	; 0x30
    217a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    217c:	8f a5       	ldd	r24, Y+47	; 0x2f
    217e:	98 a9       	ldd	r25, Y+48	; 0x30
    2180:	00 97       	sbiw	r24, 0x00	; 0
    2182:	69 f7       	brne	.-38     	; 0x215e <LCD_Command+0xb4>
    2184:	14 c0       	rjmp	.+40     	; 0x21ae <LCD_Command+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2186:	69 a9       	ldd	r22, Y+49	; 0x31
    2188:	7a a9       	ldd	r23, Y+50	; 0x32
    218a:	8b a9       	ldd	r24, Y+51	; 0x33
    218c:	9c a9       	ldd	r25, Y+52	; 0x34
    218e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	98 ab       	std	Y+48, r25	; 0x30
    2198:	8f a7       	std	Y+47, r24	; 0x2f
    219a:	8f a5       	ldd	r24, Y+47	; 0x2f
    219c:	98 a9       	ldd	r25, Y+48	; 0x30
    219e:	9c a7       	std	Y+44, r25	; 0x2c
    21a0:	8b a7       	std	Y+43, r24	; 0x2b
    21a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    21a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_Command+0xfc>
    21aa:	9c a7       	std	Y+44, r25	; 0x2c
    21ac:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    21ae:	83 e4       	ldi	r24, 0x43	; 67
    21b0:	62 e0       	ldi	r22, 0x02	; 2
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	a0 e8       	ldi	r26, 0x80	; 128
    21be:	bf e3       	ldi	r27, 0x3F	; 63
    21c0:	8f a3       	std	Y+39, r24	; 0x27
    21c2:	98 a7       	std	Y+40, r25	; 0x28
    21c4:	a9 a7       	std	Y+41, r26	; 0x29
    21c6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c8:	6f a1       	ldd	r22, Y+39	; 0x27
    21ca:	78 a5       	ldd	r23, Y+40	; 0x28
    21cc:	89 a5       	ldd	r24, Y+41	; 0x29
    21ce:	9a a5       	ldd	r25, Y+42	; 0x2a
    21d0:	20 e0       	ldi	r18, 0x00	; 0
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	4a e7       	ldi	r20, 0x7A	; 122
    21d6:	53 e4       	ldi	r21, 0x43	; 67
    21d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21dc:	dc 01       	movw	r26, r24
    21de:	cb 01       	movw	r24, r22
    21e0:	8b a3       	std	Y+35, r24	; 0x23
    21e2:	9c a3       	std	Y+36, r25	; 0x24
    21e4:	ad a3       	std	Y+37, r26	; 0x25
    21e6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21e8:	6b a1       	ldd	r22, Y+35	; 0x23
    21ea:	7c a1       	ldd	r23, Y+36	; 0x24
    21ec:	8d a1       	ldd	r24, Y+37	; 0x25
    21ee:	9e a1       	ldd	r25, Y+38	; 0x26
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	40 e8       	ldi	r20, 0x80	; 128
    21f6:	5f e3       	ldi	r21, 0x3F	; 63
    21f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    21fc:	88 23       	and	r24, r24
    21fe:	2c f4       	brge	.+10     	; 0x220a <LCD_Command+0x160>
		__ticks = 1;
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	9a a3       	std	Y+34, r25	; 0x22
    2206:	89 a3       	std	Y+33, r24	; 0x21
    2208:	3f c0       	rjmp	.+126    	; 0x2288 <LCD_Command+0x1de>
	else if (__tmp > 65535)
    220a:	6b a1       	ldd	r22, Y+35	; 0x23
    220c:	7c a1       	ldd	r23, Y+36	; 0x24
    220e:	8d a1       	ldd	r24, Y+37	; 0x25
    2210:	9e a1       	ldd	r25, Y+38	; 0x26
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	3f ef       	ldi	r19, 0xFF	; 255
    2216:	4f e7       	ldi	r20, 0x7F	; 127
    2218:	57 e4       	ldi	r21, 0x47	; 71
    221a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    221e:	18 16       	cp	r1, r24
    2220:	4c f5       	brge	.+82     	; 0x2274 <LCD_Command+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2222:	6f a1       	ldd	r22, Y+39	; 0x27
    2224:	78 a5       	ldd	r23, Y+40	; 0x28
    2226:	89 a5       	ldd	r24, Y+41	; 0x29
    2228:	9a a5       	ldd	r25, Y+42	; 0x2a
    222a:	20 e0       	ldi	r18, 0x00	; 0
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	40 e2       	ldi	r20, 0x20	; 32
    2230:	51 e4       	ldi	r21, 0x41	; 65
    2232:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	bc 01       	movw	r22, r24
    223c:	cd 01       	movw	r24, r26
    223e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2242:	dc 01       	movw	r26, r24
    2244:	cb 01       	movw	r24, r22
    2246:	9a a3       	std	Y+34, r25	; 0x22
    2248:	89 a3       	std	Y+33, r24	; 0x21
    224a:	0f c0       	rjmp	.+30     	; 0x226a <LCD_Command+0x1c0>
    224c:	89 e1       	ldi	r24, 0x19	; 25
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	98 a3       	std	Y+32, r25	; 0x20
    2252:	8f 8f       	std	Y+31, r24	; 0x1f
    2254:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2256:	98 a1       	ldd	r25, Y+32	; 0x20
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	f1 f7       	brne	.-4      	; 0x2258 <LCD_Command+0x1ae>
    225c:	98 a3       	std	Y+32, r25	; 0x20
    225e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2260:	89 a1       	ldd	r24, Y+33	; 0x21
    2262:	9a a1       	ldd	r25, Y+34	; 0x22
    2264:	01 97       	sbiw	r24, 0x01	; 1
    2266:	9a a3       	std	Y+34, r25	; 0x22
    2268:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226a:	89 a1       	ldd	r24, Y+33	; 0x21
    226c:	9a a1       	ldd	r25, Y+34	; 0x22
    226e:	00 97       	sbiw	r24, 0x00	; 0
    2270:	69 f7       	brne	.-38     	; 0x224c <LCD_Command+0x1a2>
    2272:	14 c0       	rjmp	.+40     	; 0x229c <LCD_Command+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2274:	6b a1       	ldd	r22, Y+35	; 0x23
    2276:	7c a1       	ldd	r23, Y+36	; 0x24
    2278:	8d a1       	ldd	r24, Y+37	; 0x25
    227a:	9e a1       	ldd	r25, Y+38	; 0x26
    227c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9a a3       	std	Y+34, r25	; 0x22
    2286:	89 a3       	std	Y+33, r24	; 0x21
    2288:	89 a1       	ldd	r24, Y+33	; 0x21
    228a:	9a a1       	ldd	r25, Y+34	; 0x22
    228c:	9e 8f       	std	Y+30, r25	; 0x1e
    228e:	8d 8f       	std	Y+29, r24	; 0x1d
    2290:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2292:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_Command+0x1ea>
    2298:	9e 8f       	std	Y+30, r25	; 0x1e
    229a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,cmd>>4);
    229c:	89 ad       	ldd	r24, Y+57	; 0x39
    229e:	98 2f       	mov	r25, r24
    22a0:	92 95       	swap	r25
    22a2:	9f 70       	andi	r25, 0x0F	; 15
    22a4:	84 e4       	ldi	r24, 0x44	; 68
    22a6:	69 2f       	mov	r22, r25
    22a8:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DIO_write_high_nibble>
	LCD_refresh();
    22ac:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,cmd);
    22b0:	84 e4       	ldi	r24, 0x44	; 68
    22b2:	69 ad       	ldd	r22, Y+57	; 0x39
    22b4:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DIO_write_high_nibble>
    22b8:	80 e0       	ldi	r24, 0x00	; 0
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	a0 e8       	ldi	r26, 0x80	; 128
    22be:	bf e3       	ldi	r27, 0x3F	; 63
    22c0:	89 8f       	std	Y+25, r24	; 0x19
    22c2:	9a 8f       	std	Y+26, r25	; 0x1a
    22c4:	ab 8f       	std	Y+27, r26	; 0x1b
    22c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22c8:	69 8d       	ldd	r22, Y+25	; 0x19
    22ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4a e7       	ldi	r20, 0x7A	; 122
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	8d 8b       	std	Y+21, r24	; 0x15
    22e2:	9e 8b       	std	Y+22, r25	; 0x16
    22e4:	af 8b       	std	Y+23, r26	; 0x17
    22e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22e8:	6d 89       	ldd	r22, Y+21	; 0x15
    22ea:	7e 89       	ldd	r23, Y+22	; 0x16
    22ec:	8f 89       	ldd	r24, Y+23	; 0x17
    22ee:	98 8d       	ldd	r25, Y+24	; 0x18
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 e8       	ldi	r20, 0x80	; 128
    22f6:	5f e3       	ldi	r21, 0x3F	; 63
    22f8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22fc:	88 23       	and	r24, r24
    22fe:	2c f4       	brge	.+10     	; 0x230a <LCD_Command+0x260>
		__ticks = 1;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	8b 8b       	std	Y+19, r24	; 0x13
    2308:	3f c0       	rjmp	.+126    	; 0x2388 <LCD_Command+0x2de>
	else if (__tmp > 65535)
    230a:	6d 89       	ldd	r22, Y+21	; 0x15
    230c:	7e 89       	ldd	r23, Y+22	; 0x16
    230e:	8f 89       	ldd	r24, Y+23	; 0x17
    2310:	98 8d       	ldd	r25, Y+24	; 0x18
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	3f ef       	ldi	r19, 0xFF	; 255
    2316:	4f e7       	ldi	r20, 0x7F	; 127
    2318:	57 e4       	ldi	r21, 0x47	; 71
    231a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    231e:	18 16       	cp	r1, r24
    2320:	4c f5       	brge	.+82     	; 0x2374 <LCD_Command+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2322:	69 8d       	ldd	r22, Y+25	; 0x19
    2324:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2326:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2328:	9c 8d       	ldd	r25, Y+28	; 0x1c
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e2       	ldi	r20, 0x20	; 32
    2330:	51 e4       	ldi	r21, 0x41	; 65
    2332:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2336:	dc 01       	movw	r26, r24
    2338:	cb 01       	movw	r24, r22
    233a:	bc 01       	movw	r22, r24
    233c:	cd 01       	movw	r24, r26
    233e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2342:	dc 01       	movw	r26, r24
    2344:	cb 01       	movw	r24, r22
    2346:	9c 8b       	std	Y+20, r25	; 0x14
    2348:	8b 8b       	std	Y+19, r24	; 0x13
    234a:	0f c0       	rjmp	.+30     	; 0x236a <LCD_Command+0x2c0>
    234c:	89 e1       	ldi	r24, 0x19	; 25
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	9a 8b       	std	Y+18, r25	; 0x12
    2352:	89 8b       	std	Y+17, r24	; 0x11
    2354:	89 89       	ldd	r24, Y+17	; 0x11
    2356:	9a 89       	ldd	r25, Y+18	; 0x12
    2358:	01 97       	sbiw	r24, 0x01	; 1
    235a:	f1 f7       	brne	.-4      	; 0x2358 <LCD_Command+0x2ae>
    235c:	9a 8b       	std	Y+18, r25	; 0x12
    235e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2360:	8b 89       	ldd	r24, Y+19	; 0x13
    2362:	9c 89       	ldd	r25, Y+20	; 0x14
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	9c 8b       	std	Y+20, r25	; 0x14
    2368:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    236a:	8b 89       	ldd	r24, Y+19	; 0x13
    236c:	9c 89       	ldd	r25, Y+20	; 0x14
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	69 f7       	brne	.-38     	; 0x234c <LCD_Command+0x2a2>
    2372:	14 c0       	rjmp	.+40     	; 0x239c <LCD_Command+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2374:	6d 89       	ldd	r22, Y+21	; 0x15
    2376:	7e 89       	ldd	r23, Y+22	; 0x16
    2378:	8f 89       	ldd	r24, Y+23	; 0x17
    237a:	98 8d       	ldd	r25, Y+24	; 0x18
    237c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9c 8b       	std	Y+20, r25	; 0x14
    2386:	8b 8b       	std	Y+19, r24	; 0x13
    2388:	8b 89       	ldd	r24, Y+19	; 0x13
    238a:	9c 89       	ldd	r25, Y+20	; 0x14
    238c:	98 8b       	std	Y+16, r25	; 0x10
    238e:	8f 87       	std	Y+15, r24	; 0x0f
    2390:	8f 85       	ldd	r24, Y+15	; 0x0f
    2392:	98 89       	ldd	r25, Y+16	; 0x10
    2394:	01 97       	sbiw	r24, 0x01	; 1
    2396:	f1 f7       	brne	.-4      	; 0x2394 <LCD_Command+0x2ea>
    2398:	98 8b       	std	Y+16, r25	; 0x10
    239a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    239c:	83 e4       	ldi	r24, 0x43	; 67
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	40 e0       	ldi	r20, 0x00	; 0
    23a2:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	a0 e8       	ldi	r26, 0x80	; 128
    23ac:	bf e3       	ldi	r27, 0x3F	; 63
    23ae:	8b 87       	std	Y+11, r24	; 0x0b
    23b0:	9c 87       	std	Y+12, r25	; 0x0c
    23b2:	ad 87       	std	Y+13, r26	; 0x0d
    23b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    23bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	4a e7       	ldi	r20, 0x7A	; 122
    23c4:	53 e4       	ldi	r21, 0x43	; 67
    23c6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	8f 83       	std	Y+7, r24	; 0x07
    23d0:	98 87       	std	Y+8, r25	; 0x08
    23d2:	a9 87       	std	Y+9, r26	; 0x09
    23d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23d6:	6f 81       	ldd	r22, Y+7	; 0x07
    23d8:	78 85       	ldd	r23, Y+8	; 0x08
    23da:	89 85       	ldd	r24, Y+9	; 0x09
    23dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e8       	ldi	r20, 0x80	; 128
    23e4:	5f e3       	ldi	r21, 0x3F	; 63
    23e6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_Command+0x34e>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9e 83       	std	Y+6, r25	; 0x06
    23f4:	8d 83       	std	Y+5, r24	; 0x05
    23f6:	3f c0       	rjmp	.+126    	; 0x2476 <LCD_Command+0x3cc>
	else if (__tmp > 65535)
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	3f ef       	ldi	r19, 0xFF	; 255
    2404:	4f e7       	ldi	r20, 0x7F	; 127
    2406:	57 e4       	ldi	r21, 0x47	; 71
    2408:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    240c:	18 16       	cp	r1, r24
    240e:	4c f5       	brge	.+82     	; 0x2462 <LCD_Command+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2410:	6b 85       	ldd	r22, Y+11	; 0x0b
    2412:	7c 85       	ldd	r23, Y+12	; 0x0c
    2414:	8d 85       	ldd	r24, Y+13	; 0x0d
    2416:	9e 85       	ldd	r25, Y+14	; 0x0e
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e 83       	std	Y+6, r25	; 0x06
    2436:	8d 83       	std	Y+5, r24	; 0x05
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_Command+0x3ae>
    243a:	89 e1       	ldi	r24, 0x19	; 25
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_Command+0x39c>
    244a:	9c 83       	std	Y+4, r25	; 0x04
    244c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8d 81       	ldd	r24, Y+5	; 0x05
    245a:	9e 81       	ldd	r25, Y+6	; 0x06
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_Command+0x390>
    2460:	14 c0       	rjmp	.+40     	; 0x248a <LCD_Command+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	6f 81       	ldd	r22, Y+7	; 0x07
    2464:	78 85       	ldd	r23, Y+8	; 0x08
    2466:	89 85       	ldd	r24, Y+9	; 0x09
    2468:	9a 85       	ldd	r25, Y+10	; 0x0a
    246a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	9e 83       	std	Y+6, r25	; 0x06
    2474:	8d 83       	std	Y+5, r24	; 0x05
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	9a 83       	std	Y+2, r25	; 0x02
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	01 97       	sbiw	r24, 0x01	; 1
    2484:	f1 f7       	brne	.-4      	; 0x2482 <LCD_Command+0x3d8>
    2486:	9a 83       	std	Y+2, r25	; 0x02
    2488:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    248a:	e9 96       	adiw	r28, 0x39	; 57
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	cf 91       	pop	r28
    2498:	df 91       	pop	r29
    249a:	08 95       	ret

0000249c <LCD_init>:
void LCD_init(void)
{
    249c:	df 93       	push	r29
    249e:	cf 93       	push	r28
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	2e 97       	sbiw	r28, 0x0e	; 14
    24a6:	0f b6       	in	r0, 0x3f	; 63
    24a8:	f8 94       	cli
    24aa:	de bf       	out	0x3e, r29	; 62
    24ac:	0f be       	out	0x3f, r0	; 63
    24ae:	cd bf       	out	0x3d, r28	; 61
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a8 e4       	ldi	r26, 0x48	; 72
    24b6:	b3 e4       	ldi	r27, 0x43	; 67
    24b8:	8b 87       	std	Y+11, r24	; 0x0b
    24ba:	9c 87       	std	Y+12, r25	; 0x0c
    24bc:	ad 87       	std	Y+13, r26	; 0x0d
    24be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    24c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    24c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    24c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	4a e7       	ldi	r20, 0x7A	; 122
    24ce:	53 e4       	ldi	r21, 0x43	; 67
    24d0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24d4:	dc 01       	movw	r26, r24
    24d6:	cb 01       	movw	r24, r22
    24d8:	8f 83       	std	Y+7, r24	; 0x07
    24da:	98 87       	std	Y+8, r25	; 0x08
    24dc:	a9 87       	std	Y+9, r26	; 0x09
    24de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24e0:	6f 81       	ldd	r22, Y+7	; 0x07
    24e2:	78 85       	ldd	r23, Y+8	; 0x08
    24e4:	89 85       	ldd	r24, Y+9	; 0x09
    24e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e8       	ldi	r20, 0x80	; 128
    24ee:	5f e3       	ldi	r21, 0x3F	; 63
    24f0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24f4:	88 23       	and	r24, r24
    24f6:	2c f4       	brge	.+10     	; 0x2502 <LCD_init+0x66>
		__ticks = 1;
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	9e 83       	std	Y+6, r25	; 0x06
    24fe:	8d 83       	std	Y+5, r24	; 0x05
    2500:	3f c0       	rjmp	.+126    	; 0x2580 <LCD_init+0xe4>
	else if (__tmp > 65535)
    2502:	6f 81       	ldd	r22, Y+7	; 0x07
    2504:	78 85       	ldd	r23, Y+8	; 0x08
    2506:	89 85       	ldd	r24, Y+9	; 0x09
    2508:	9a 85       	ldd	r25, Y+10	; 0x0a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	3f ef       	ldi	r19, 0xFF	; 255
    250e:	4f e7       	ldi	r20, 0x7F	; 127
    2510:	57 e4       	ldi	r21, 0x47	; 71
    2512:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2516:	18 16       	cp	r1, r24
    2518:	4c f5       	brge	.+82     	; 0x256c <LCD_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251a:	6b 85       	ldd	r22, Y+11	; 0x0b
    251c:	7c 85       	ldd	r23, Y+12	; 0x0c
    251e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2520:	9e 85       	ldd	r25, Y+14	; 0x0e
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e2       	ldi	r20, 0x20	; 32
    2528:	51 e4       	ldi	r21, 0x41	; 65
    252a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	bc 01       	movw	r22, r24
    2534:	cd 01       	movw	r24, r26
    2536:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	9e 83       	std	Y+6, r25	; 0x06
    2540:	8d 83       	std	Y+5, r24	; 0x05
    2542:	0f c0       	rjmp	.+30     	; 0x2562 <LCD_init+0xc6>
    2544:	89 e1       	ldi	r24, 0x19	; 25
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	9c 83       	std	Y+4, r25	; 0x04
    254a:	8b 83       	std	Y+3, r24	; 0x03
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	01 97       	sbiw	r24, 0x01	; 1
    2552:	f1 f7       	brne	.-4      	; 0x2550 <LCD_init+0xb4>
    2554:	9c 83       	std	Y+4, r25	; 0x04
    2556:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2558:	8d 81       	ldd	r24, Y+5	; 0x05
    255a:	9e 81       	ldd	r25, Y+6	; 0x06
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9e 83       	std	Y+6, r25	; 0x06
    2560:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	00 97       	sbiw	r24, 0x00	; 0
    2568:	69 f7       	brne	.-38     	; 0x2544 <LCD_init+0xa8>
    256a:	14 c0       	rjmp	.+40     	; 0x2594 <LCD_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    256c:	6f 81       	ldd	r22, Y+7	; 0x07
    256e:	78 85       	ldd	r23, Y+8	; 0x08
    2570:	89 85       	ldd	r24, Y+9	; 0x09
    2572:	9a 85       	ldd	r25, Y+10	; 0x0a
    2574:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	9e 83       	std	Y+6, r25	; 0x06
    257e:	8d 83       	std	Y+5, r24	; 0x05
    2580:	8d 81       	ldd	r24, Y+5	; 0x05
    2582:	9e 81       	ldd	r25, Y+6	; 0x06
    2584:	9a 83       	std	Y+2, r25	; 0x02
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	9a 81       	ldd	r25, Y+2	; 0x02
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <LCD_init+0xf0>
    2590:	9a 83       	std	Y+2, r25	; 0x02
    2592:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
	DIO_setPINDir(LCD_ctrl_port,RS,out);
    2594:	83 e4       	ldi	r24, 0x43	; 67
    2596:	60 e0       	ldi	r22, 0x00	; 0
    2598:	41 e0       	ldi	r20, 0x01	; 1
    259a:	0e 94 54 07 	call	0xea8	; 0xea8 <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,RW,out);
    259e:	83 e4       	ldi	r24, 0x43	; 67
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	41 e0       	ldi	r20, 0x01	; 1
    25a4:	0e 94 54 07 	call	0xea8	; 0xea8 <DIO_setPINDir>
	DIO_setPINDir(LCD_ctrl_port,EN,out);
    25a8:	83 e4       	ldi	r24, 0x43	; 67
    25aa:	62 e0       	ldi	r22, 0x02	; 2
    25ac:	41 e0       	ldi	r20, 0x01	; 1
    25ae:	0e 94 54 07 	call	0xea8	; 0xea8 <DIO_setPINDir>
	DIO_write_high_nibbleDir(LCD_data_port,out);
    25b2:	84 e4       	ldi	r24, 0x44	; 68
    25b4:	61 e0       	ldi	r22, 0x01	; 1
    25b6:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <DIO_write_high_nibbleDir>
	LCD_Command(LCD_Cursor_reset);
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_Command>
	LCD_Command(LCD_4bit_2line);
    25c0:	88 e2       	ldi	r24, 0x28	; 40
    25c2:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_Command>
	LCD_Command(LCD_displayOn_cursorOff);
    25c6:	8c e0       	ldi	r24, 0x0C	; 12
    25c8:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_Command>
	LCD_Command(LCD_clear_cmd);
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_Command>
}
    25d2:	2e 96       	adiw	r28, 0x0e	; 14
    25d4:	0f b6       	in	r0, 0x3f	; 63
    25d6:	f8 94       	cli
    25d8:	de bf       	out	0x3e, r29	; 62
    25da:	0f be       	out	0x3f, r0	; 63
    25dc:	cd bf       	out	0x3d, r28	; 61
    25de:	cf 91       	pop	r28
    25e0:	df 91       	pop	r29
    25e2:	08 95       	ret

000025e4 <LCD_displayChar>:

void LCD_displayChar(uint8 data)
{
    25e4:	df 93       	push	r29
    25e6:	cf 93       	push	r28
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	e9 97       	sbiw	r28, 0x39	; 57
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	89 af       	std	Y+57, r24	; 0x39
	DIO_write_PIN(LCD_ctrl_port,RS,1);
    25fa:	83 e4       	ldi	r24, 0x43	; 67
    25fc:	60 e0       	ldi	r22, 0x00	; 0
    25fe:	41 e0       	ldi	r20, 0x01	; 1
    2600:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	a0 e8       	ldi	r26, 0x80	; 128
    260a:	bf e3       	ldi	r27, 0x3F	; 63
    260c:	8d ab       	std	Y+53, r24	; 0x35
    260e:	9e ab       	std	Y+54, r25	; 0x36
    2610:	af ab       	std	Y+55, r26	; 0x37
    2612:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2614:	6d a9       	ldd	r22, Y+53	; 0x35
    2616:	7e a9       	ldd	r23, Y+54	; 0x36
    2618:	8f a9       	ldd	r24, Y+55	; 0x37
    261a:	98 ad       	ldd	r25, Y+56	; 0x38
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	4a e7       	ldi	r20, 0x7A	; 122
    2622:	53 e4       	ldi	r21, 0x43	; 67
    2624:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2628:	dc 01       	movw	r26, r24
    262a:	cb 01       	movw	r24, r22
    262c:	89 ab       	std	Y+49, r24	; 0x31
    262e:	9a ab       	std	Y+50, r25	; 0x32
    2630:	ab ab       	std	Y+51, r26	; 0x33
    2632:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2634:	69 a9       	ldd	r22, Y+49	; 0x31
    2636:	7a a9       	ldd	r23, Y+50	; 0x32
    2638:	8b a9       	ldd	r24, Y+51	; 0x33
    263a:	9c a9       	ldd	r25, Y+52	; 0x34
    263c:	20 e0       	ldi	r18, 0x00	; 0
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	40 e8       	ldi	r20, 0x80	; 128
    2642:	5f e3       	ldi	r21, 0x3F	; 63
    2644:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2648:	88 23       	and	r24, r24
    264a:	2c f4       	brge	.+10     	; 0x2656 <LCD_displayChar+0x72>
		__ticks = 1;
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	98 ab       	std	Y+48, r25	; 0x30
    2652:	8f a7       	std	Y+47, r24	; 0x2f
    2654:	3f c0       	rjmp	.+126    	; 0x26d4 <LCD_displayChar+0xf0>
	else if (__tmp > 65535)
    2656:	69 a9       	ldd	r22, Y+49	; 0x31
    2658:	7a a9       	ldd	r23, Y+50	; 0x32
    265a:	8b a9       	ldd	r24, Y+51	; 0x33
    265c:	9c a9       	ldd	r25, Y+52	; 0x34
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	3f ef       	ldi	r19, 0xFF	; 255
    2662:	4f e7       	ldi	r20, 0x7F	; 127
    2664:	57 e4       	ldi	r21, 0x47	; 71
    2666:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    266a:	18 16       	cp	r1, r24
    266c:	4c f5       	brge	.+82     	; 0x26c0 <LCD_displayChar+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266e:	6d a9       	ldd	r22, Y+53	; 0x35
    2670:	7e a9       	ldd	r23, Y+54	; 0x36
    2672:	8f a9       	ldd	r24, Y+55	; 0x37
    2674:	98 ad       	ldd	r25, Y+56	; 0x38
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e2       	ldi	r20, 0x20	; 32
    267c:	51 e4       	ldi	r21, 0x41	; 65
    267e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	bc 01       	movw	r22, r24
    2688:	cd 01       	movw	r24, r26
    268a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	98 ab       	std	Y+48, r25	; 0x30
    2694:	8f a7       	std	Y+47, r24	; 0x2f
    2696:	0f c0       	rjmp	.+30     	; 0x26b6 <LCD_displayChar+0xd2>
    2698:	89 e1       	ldi	r24, 0x19	; 25
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9e a7       	std	Y+46, r25	; 0x2e
    269e:	8d a7       	std	Y+45, r24	; 0x2d
    26a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    26a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <LCD_displayChar+0xc0>
    26a8:	9e a7       	std	Y+46, r25	; 0x2e
    26aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    26ae:	98 a9       	ldd	r25, Y+48	; 0x30
    26b0:	01 97       	sbiw	r24, 0x01	; 1
    26b2:	98 ab       	std	Y+48, r25	; 0x30
    26b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    26b8:	98 a9       	ldd	r25, Y+48	; 0x30
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	69 f7       	brne	.-38     	; 0x2698 <LCD_displayChar+0xb4>
    26be:	14 c0       	rjmp	.+40     	; 0x26e8 <LCD_displayChar+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c0:	69 a9       	ldd	r22, Y+49	; 0x31
    26c2:	7a a9       	ldd	r23, Y+50	; 0x32
    26c4:	8b a9       	ldd	r24, Y+51	; 0x33
    26c6:	9c a9       	ldd	r25, Y+52	; 0x34
    26c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	98 ab       	std	Y+48, r25	; 0x30
    26d2:	8f a7       	std	Y+47, r24	; 0x2f
    26d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    26d6:	98 a9       	ldd	r25, Y+48	; 0x30
    26d8:	9c a7       	std	Y+44, r25	; 0x2c
    26da:	8b a7       	std	Y+43, r24	; 0x2b
    26dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    26de:	9c a5       	ldd	r25, Y+44	; 0x2c
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	f1 f7       	brne	.-4      	; 0x26e0 <LCD_displayChar+0xfc>
    26e4:	9c a7       	std	Y+44, r25	; 0x2c
    26e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,1);
    26e8:	83 e4       	ldi	r24, 0x43	; 67
    26ea:	62 e0       	ldi	r22, 0x02	; 2
    26ec:	41 e0       	ldi	r20, 0x01	; 1
    26ee:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    26f2:	80 e0       	ldi	r24, 0x00	; 0
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	a0 e8       	ldi	r26, 0x80	; 128
    26f8:	bf e3       	ldi	r27, 0x3F	; 63
    26fa:	8f a3       	std	Y+39, r24	; 0x27
    26fc:	98 a7       	std	Y+40, r25	; 0x28
    26fe:	a9 a7       	std	Y+41, r26	; 0x29
    2700:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2702:	6f a1       	ldd	r22, Y+39	; 0x27
    2704:	78 a5       	ldd	r23, Y+40	; 0x28
    2706:	89 a5       	ldd	r24, Y+41	; 0x29
    2708:	9a a5       	ldd	r25, Y+42	; 0x2a
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	4a e7       	ldi	r20, 0x7A	; 122
    2710:	53 e4       	ldi	r21, 0x43	; 67
    2712:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	8b a3       	std	Y+35, r24	; 0x23
    271c:	9c a3       	std	Y+36, r25	; 0x24
    271e:	ad a3       	std	Y+37, r26	; 0x25
    2720:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2722:	6b a1       	ldd	r22, Y+35	; 0x23
    2724:	7c a1       	ldd	r23, Y+36	; 0x24
    2726:	8d a1       	ldd	r24, Y+37	; 0x25
    2728:	9e a1       	ldd	r25, Y+38	; 0x26
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e8       	ldi	r20, 0x80	; 128
    2730:	5f e3       	ldi	r21, 0x3F	; 63
    2732:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2736:	88 23       	and	r24, r24
    2738:	2c f4       	brge	.+10     	; 0x2744 <LCD_displayChar+0x160>
		__ticks = 1;
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	9a a3       	std	Y+34, r25	; 0x22
    2740:	89 a3       	std	Y+33, r24	; 0x21
    2742:	3f c0       	rjmp	.+126    	; 0x27c2 <LCD_displayChar+0x1de>
	else if (__tmp > 65535)
    2744:	6b a1       	ldd	r22, Y+35	; 0x23
    2746:	7c a1       	ldd	r23, Y+36	; 0x24
    2748:	8d a1       	ldd	r24, Y+37	; 0x25
    274a:	9e a1       	ldd	r25, Y+38	; 0x26
    274c:	20 e0       	ldi	r18, 0x00	; 0
    274e:	3f ef       	ldi	r19, 0xFF	; 255
    2750:	4f e7       	ldi	r20, 0x7F	; 127
    2752:	57 e4       	ldi	r21, 0x47	; 71
    2754:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2758:	18 16       	cp	r1, r24
    275a:	4c f5       	brge	.+82     	; 0x27ae <LCD_displayChar+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275c:	6f a1       	ldd	r22, Y+39	; 0x27
    275e:	78 a5       	ldd	r23, Y+40	; 0x28
    2760:	89 a5       	ldd	r24, Y+41	; 0x29
    2762:	9a a5       	ldd	r25, Y+42	; 0x2a
    2764:	20 e0       	ldi	r18, 0x00	; 0
    2766:	30 e0       	ldi	r19, 0x00	; 0
    2768:	40 e2       	ldi	r20, 0x20	; 32
    276a:	51 e4       	ldi	r21, 0x41	; 65
    276c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	bc 01       	movw	r22, r24
    2776:	cd 01       	movw	r24, r26
    2778:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	9a a3       	std	Y+34, r25	; 0x22
    2782:	89 a3       	std	Y+33, r24	; 0x21
    2784:	0f c0       	rjmp	.+30     	; 0x27a4 <LCD_displayChar+0x1c0>
    2786:	89 e1       	ldi	r24, 0x19	; 25
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	98 a3       	std	Y+32, r25	; 0x20
    278c:	8f 8f       	std	Y+31, r24	; 0x1f
    278e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2790:	98 a1       	ldd	r25, Y+32	; 0x20
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_displayChar+0x1ae>
    2796:	98 a3       	std	Y+32, r25	; 0x20
    2798:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279a:	89 a1       	ldd	r24, Y+33	; 0x21
    279c:	9a a1       	ldd	r25, Y+34	; 0x22
    279e:	01 97       	sbiw	r24, 0x01	; 1
    27a0:	9a a3       	std	Y+34, r25	; 0x22
    27a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a4:	89 a1       	ldd	r24, Y+33	; 0x21
    27a6:	9a a1       	ldd	r25, Y+34	; 0x22
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	69 f7       	brne	.-38     	; 0x2786 <LCD_displayChar+0x1a2>
    27ac:	14 c0       	rjmp	.+40     	; 0x27d6 <LCD_displayChar+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ae:	6b a1       	ldd	r22, Y+35	; 0x23
    27b0:	7c a1       	ldd	r23, Y+36	; 0x24
    27b2:	8d a1       	ldd	r24, Y+37	; 0x25
    27b4:	9e a1       	ldd	r25, Y+38	; 0x26
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9a a3       	std	Y+34, r25	; 0x22
    27c0:	89 a3       	std	Y+33, r24	; 0x21
    27c2:	89 a1       	ldd	r24, Y+33	; 0x21
    27c4:	9a a1       	ldd	r25, Y+34	; 0x22
    27c6:	9e 8f       	std	Y+30, r25	; 0x1e
    27c8:	8d 8f       	std	Y+29, r24	; 0x1d
    27ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    27ce:	01 97       	sbiw	r24, 0x01	; 1
    27d0:	f1 f7       	brne	.-4      	; 0x27ce <LCD_displayChar+0x1ea>
    27d2:	9e 8f       	std	Y+30, r25	; 0x1e
    27d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	DIO_write_high_nibble(LCD_data_port,HIGH_NIBBLE_OF(data));
    27d6:	89 ad       	ldd	r24, Y+57	; 0x39
    27d8:	98 2f       	mov	r25, r24
    27da:	92 95       	swap	r25
    27dc:	9f 70       	andi	r25, 0x0F	; 15
    27de:	84 e4       	ldi	r24, 0x44	; 68
    27e0:	69 2f       	mov	r22, r25
    27e2:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DIO_write_high_nibble>
	LCD_refresh();
    27e6:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <LCD_refresh>
	DIO_write_high_nibble(LCD_data_port,data);
    27ea:	84 e4       	ldi	r24, 0x44	; 68
    27ec:	69 ad       	ldd	r22, Y+57	; 0x39
    27ee:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <DIO_write_high_nibble>
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	90 e0       	ldi	r25, 0x00	; 0
    27f6:	a0 e8       	ldi	r26, 0x80	; 128
    27f8:	bf e3       	ldi	r27, 0x3F	; 63
    27fa:	89 8f       	std	Y+25, r24	; 0x19
    27fc:	9a 8f       	std	Y+26, r25	; 0x1a
    27fe:	ab 8f       	std	Y+27, r26	; 0x1b
    2800:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2802:	69 8d       	ldd	r22, Y+25	; 0x19
    2804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	4a e7       	ldi	r20, 0x7A	; 122
    2810:	53 e4       	ldi	r21, 0x43	; 67
    2812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	8d 8b       	std	Y+21, r24	; 0x15
    281c:	9e 8b       	std	Y+22, r25	; 0x16
    281e:	af 8b       	std	Y+23, r26	; 0x17
    2820:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2822:	6d 89       	ldd	r22, Y+21	; 0x15
    2824:	7e 89       	ldd	r23, Y+22	; 0x16
    2826:	8f 89       	ldd	r24, Y+23	; 0x17
    2828:	98 8d       	ldd	r25, Y+24	; 0x18
    282a:	20 e0       	ldi	r18, 0x00	; 0
    282c:	30 e0       	ldi	r19, 0x00	; 0
    282e:	40 e8       	ldi	r20, 0x80	; 128
    2830:	5f e3       	ldi	r21, 0x3F	; 63
    2832:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2836:	88 23       	and	r24, r24
    2838:	2c f4       	brge	.+10     	; 0x2844 <LCD_displayChar+0x260>
		__ticks = 1;
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	9c 8b       	std	Y+20, r25	; 0x14
    2840:	8b 8b       	std	Y+19, r24	; 0x13
    2842:	3f c0       	rjmp	.+126    	; 0x28c2 <LCD_displayChar+0x2de>
	else if (__tmp > 65535)
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	3f ef       	ldi	r19, 0xFF	; 255
    2850:	4f e7       	ldi	r20, 0x7F	; 127
    2852:	57 e4       	ldi	r21, 0x47	; 71
    2854:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2858:	18 16       	cp	r1, r24
    285a:	4c f5       	brge	.+82     	; 0x28ae <LCD_displayChar+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    285c:	69 8d       	ldd	r22, Y+25	; 0x19
    285e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2860:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2862:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	30 e0       	ldi	r19, 0x00	; 0
    2868:	40 e2       	ldi	r20, 0x20	; 32
    286a:	51 e4       	ldi	r21, 0x41	; 65
    286c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2870:	dc 01       	movw	r26, r24
    2872:	cb 01       	movw	r24, r22
    2874:	bc 01       	movw	r22, r24
    2876:	cd 01       	movw	r24, r26
    2878:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    287c:	dc 01       	movw	r26, r24
    287e:	cb 01       	movw	r24, r22
    2880:	9c 8b       	std	Y+20, r25	; 0x14
    2882:	8b 8b       	std	Y+19, r24	; 0x13
    2884:	0f c0       	rjmp	.+30     	; 0x28a4 <LCD_displayChar+0x2c0>
    2886:	89 e1       	ldi	r24, 0x19	; 25
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	9a 8b       	std	Y+18, r25	; 0x12
    288c:	89 8b       	std	Y+17, r24	; 0x11
    288e:	89 89       	ldd	r24, Y+17	; 0x11
    2890:	9a 89       	ldd	r25, Y+18	; 0x12
    2892:	01 97       	sbiw	r24, 0x01	; 1
    2894:	f1 f7       	brne	.-4      	; 0x2892 <LCD_displayChar+0x2ae>
    2896:	9a 8b       	std	Y+18, r25	; 0x12
    2898:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	01 97       	sbiw	r24, 0x01	; 1
    28a0:	9c 8b       	std	Y+20, r25	; 0x14
    28a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a4:	8b 89       	ldd	r24, Y+19	; 0x13
    28a6:	9c 89       	ldd	r25, Y+20	; 0x14
    28a8:	00 97       	sbiw	r24, 0x00	; 0
    28aa:	69 f7       	brne	.-38     	; 0x2886 <LCD_displayChar+0x2a2>
    28ac:	14 c0       	rjmp	.+40     	; 0x28d6 <LCD_displayChar+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28ae:	6d 89       	ldd	r22, Y+21	; 0x15
    28b0:	7e 89       	ldd	r23, Y+22	; 0x16
    28b2:	8f 89       	ldd	r24, Y+23	; 0x17
    28b4:	98 8d       	ldd	r25, Y+24	; 0x18
    28b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	9c 8b       	std	Y+20, r25	; 0x14
    28c0:	8b 8b       	std	Y+19, r24	; 0x13
    28c2:	8b 89       	ldd	r24, Y+19	; 0x13
    28c4:	9c 89       	ldd	r25, Y+20	; 0x14
    28c6:	98 8b       	std	Y+16, r25	; 0x10
    28c8:	8f 87       	std	Y+15, r24	; 0x0f
    28ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    28cc:	98 89       	ldd	r25, Y+16	; 0x10
    28ce:	01 97       	sbiw	r24, 0x01	; 1
    28d0:	f1 f7       	brne	.-4      	; 0x28ce <LCD_displayChar+0x2ea>
    28d2:	98 8b       	std	Y+16, r25	; 0x10
    28d4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_write_PIN(LCD_ctrl_port,EN,0);
    28d6:	83 e4       	ldi	r24, 0x43	; 67
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	40 e0       	ldi	r20, 0x00	; 0
    28dc:	0e 94 38 08 	call	0x1070	; 0x1070 <DIO_write_PIN>
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	a0 e8       	ldi	r26, 0x80	; 128
    28e6:	bf e3       	ldi	r27, 0x3F	; 63
    28e8:	8b 87       	std	Y+11, r24	; 0x0b
    28ea:	9c 87       	std	Y+12, r25	; 0x0c
    28ec:	ad 87       	std	Y+13, r26	; 0x0d
    28ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28f8:	20 e0       	ldi	r18, 0x00	; 0
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	4a e7       	ldi	r20, 0x7A	; 122
    28fe:	53 e4       	ldi	r21, 0x43	; 67
    2900:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2904:	dc 01       	movw	r26, r24
    2906:	cb 01       	movw	r24, r22
    2908:	8f 83       	std	Y+7, r24	; 0x07
    290a:	98 87       	std	Y+8, r25	; 0x08
    290c:	a9 87       	std	Y+9, r26	; 0x09
    290e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2910:	6f 81       	ldd	r22, Y+7	; 0x07
    2912:	78 85       	ldd	r23, Y+8	; 0x08
    2914:	89 85       	ldd	r24, Y+9	; 0x09
    2916:	9a 85       	ldd	r25, Y+10	; 0x0a
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e8       	ldi	r20, 0x80	; 128
    291e:	5f e3       	ldi	r21, 0x3F	; 63
    2920:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2924:	88 23       	and	r24, r24
    2926:	2c f4       	brge	.+10     	; 0x2932 <LCD_displayChar+0x34e>
		__ticks = 1;
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	9e 83       	std	Y+6, r25	; 0x06
    292e:	8d 83       	std	Y+5, r24	; 0x05
    2930:	3f c0       	rjmp	.+126    	; 0x29b0 <LCD_displayChar+0x3cc>
	else if (__tmp > 65535)
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	3f ef       	ldi	r19, 0xFF	; 255
    293e:	4f e7       	ldi	r20, 0x7F	; 127
    2940:	57 e4       	ldi	r21, 0x47	; 71
    2942:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2946:	18 16       	cp	r1, r24
    2948:	4c f5       	brge	.+82     	; 0x299c <LCD_displayChar+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    294a:	6b 85       	ldd	r22, Y+11	; 0x0b
    294c:	7c 85       	ldd	r23, Y+12	; 0x0c
    294e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2950:	9e 85       	ldd	r25, Y+14	; 0x0e
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	40 e2       	ldi	r20, 0x20	; 32
    2958:	51 e4       	ldi	r21, 0x41	; 65
    295a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    295e:	dc 01       	movw	r26, r24
    2960:	cb 01       	movw	r24, r22
    2962:	bc 01       	movw	r22, r24
    2964:	cd 01       	movw	r24, r26
    2966:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    296a:	dc 01       	movw	r26, r24
    296c:	cb 01       	movw	r24, r22
    296e:	9e 83       	std	Y+6, r25	; 0x06
    2970:	8d 83       	std	Y+5, r24	; 0x05
    2972:	0f c0       	rjmp	.+30     	; 0x2992 <LCD_displayChar+0x3ae>
    2974:	89 e1       	ldi	r24, 0x19	; 25
    2976:	90 e0       	ldi	r25, 0x00	; 0
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	8b 83       	std	Y+3, r24	; 0x03
    297c:	8b 81       	ldd	r24, Y+3	; 0x03
    297e:	9c 81       	ldd	r25, Y+4	; 0x04
    2980:	01 97       	sbiw	r24, 0x01	; 1
    2982:	f1 f7       	brne	.-4      	; 0x2980 <LCD_displayChar+0x39c>
    2984:	9c 83       	std	Y+4, r25	; 0x04
    2986:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	01 97       	sbiw	r24, 0x01	; 1
    298e:	9e 83       	std	Y+6, r25	; 0x06
    2990:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2992:	8d 81       	ldd	r24, Y+5	; 0x05
    2994:	9e 81       	ldd	r25, Y+6	; 0x06
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	69 f7       	brne	.-38     	; 0x2974 <LCD_displayChar+0x390>
    299a:	14 c0       	rjmp	.+40     	; 0x29c4 <LCD_displayChar+0x3e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    299c:	6f 81       	ldd	r22, Y+7	; 0x07
    299e:	78 85       	ldd	r23, Y+8	; 0x08
    29a0:	89 85       	ldd	r24, Y+9	; 0x09
    29a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29a4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    29a8:	dc 01       	movw	r26, r24
    29aa:	cb 01       	movw	r24, r22
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	9a 83       	std	Y+2, r25	; 0x02
    29b6:	89 83       	std	Y+1, r24	; 0x01
    29b8:	89 81       	ldd	r24, Y+1	; 0x01
    29ba:	9a 81       	ldd	r25, Y+2	; 0x02
    29bc:	01 97       	sbiw	r24, 0x01	; 1
    29be:	f1 f7       	brne	.-4      	; 0x29bc <LCD_displayChar+0x3d8>
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    29c4:	e9 96       	adiw	r28, 0x39	; 57
    29c6:	0f b6       	in	r0, 0x3f	; 63
    29c8:	f8 94       	cli
    29ca:	de bf       	out	0x3e, r29	; 62
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	cd bf       	out	0x3d, r28	; 61
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <LCD_displayString>:


void LCD_displayString(const char *str)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	00 d0       	rcall	.+0      	; 0x29dc <LCD_displayString+0x6>
    29dc:	0f 92       	push	r0
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
    29e2:	9b 83       	std	Y+3, r25	; 0x03
    29e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    29e6:	19 82       	std	Y+1, r1	; 0x01
    29e8:	0e c0       	rjmp	.+28     	; 0x2a06 <LCD_displayString+0x30>
	while(str[i]!='\0')
	{
		LCD_displayChar(str[i]);
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	28 2f       	mov	r18, r24
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	8a 81       	ldd	r24, Y+2	; 0x02
    29f2:	9b 81       	ldd	r25, Y+3	; 0x03
    29f4:	fc 01       	movw	r30, r24
    29f6:	e2 0f       	add	r30, r18
    29f8:	f3 1f       	adc	r31, r19
    29fa:	80 81       	ld	r24, Z
    29fc:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_displayChar>
		i++;
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	8f 5f       	subi	r24, 0xFF	; 255
    2a04:	89 83       	std	Y+1, r24	; 0x01


void LCD_displayString(const char *str)
{
	uint8 i=0;
	while(str[i]!='\0')
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	28 2f       	mov	r18, r24
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	fc 01       	movw	r30, r24
    2a12:	e2 0f       	add	r30, r18
    2a14:	f3 1f       	adc	r31, r19
    2a16:	80 81       	ld	r24, Z
    2a18:	88 23       	and	r24, r24
    2a1a:	39 f7       	brne	.-50     	; 0x29ea <LCD_displayString+0x14>
	{
		LCD_displayChar(str[i]);
		i++;
	}

}
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <LCD_MoveTo_Row_Column>:


void LCD_MoveTo_Row_Column(uint8 row, uint8 col)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <LCD_MoveTo_Row_Column+0x6>
    2a2e:	00 d0       	rcall	.+0      	; 0x2a30 <LCD_MoveTo_Row_Column+0x8>
    2a30:	0f 92       	push	r0
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	8a 83       	std	Y+2, r24	; 0x02
    2a38:	6b 83       	std	Y+3, r22	; 0x03
	// The position is COL+ROW
	uint8 position;

	switch(row)
    2a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a3c:	28 2f       	mov	r18, r24
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
    2a40:	3d 83       	std	Y+5, r19	; 0x05
    2a42:	2c 83       	std	Y+4, r18	; 0x04
    2a44:	8c 81       	ldd	r24, Y+4	; 0x04
    2a46:	9d 81       	ldd	r25, Y+5	; 0x05
    2a48:	00 97       	sbiw	r24, 0x00	; 0
    2a4a:	31 f0       	breq	.+12     	; 0x2a58 <LCD_MoveTo_Row_Column+0x30>
    2a4c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a4e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a50:	21 30       	cpi	r18, 0x01	; 1
    2a52:	31 05       	cpc	r19, r1
    2a54:	21 f0       	breq	.+8      	; 0x2a5e <LCD_MoveTo_Row_Column+0x36>
    2a56:	06 c0       	rjmp	.+12     	; 0x2a64 <LCD_MoveTo_Row_Column+0x3c>
	{
		case 0:
			position=col;
    2a58:	8b 81       	ldd	r24, Y+3	; 0x03
    2a5a:	89 83       	std	Y+1, r24	; 0x01
    2a5c:	03 c0       	rjmp	.+6      	; 0x2a64 <LCD_MoveTo_Row_Column+0x3c>
			break;
		case 1:
			position=col+0x40;
    2a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a60:	80 5c       	subi	r24, 0xC0	; 192
    2a62:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	LCD_Command(position|LCD_Cursor_move_to);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	80 68       	ori	r24, 0x80	; 128
    2a68:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_Command>
}
    2a6c:	0f 90       	pop	r0
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	0f 90       	pop	r0
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	08 95       	ret

00002a7c <LCD_display_String_Row_Column>:


void LCD_display_String_Row_Column(uint8 row,uint8 col, const char *str)
{
    2a7c:	df 93       	push	r29
    2a7e:	cf 93       	push	r28
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <LCD_display_String_Row_Column+0x6>
    2a82:	00 d0       	rcall	.+0      	; 0x2a84 <LCD_display_String_Row_Column+0x8>
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	89 83       	std	Y+1, r24	; 0x01
    2a8a:	6a 83       	std	Y+2, r22	; 0x02
    2a8c:	5c 83       	std	Y+4, r21	; 0x04
    2a8e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_MoveTo_Row_Column(row,col);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	6a 81       	ldd	r22, Y+2	; 0x02
    2a94:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_MoveTo_Row_Column>
	LCD_displayString(str);
    2a98:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_displayString>

}
    2aa0:	0f 90       	pop	r0
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
    2aa6:	0f 90       	pop	r0
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <LCD_Clear>:



void LCD_Clear(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
	LCD_Command(LCD_clear_cmd);
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	0e 94 55 10 	call	0x20aa	; 0x20aa <LCD_Command>
}
    2abc:	cf 91       	pop	r28
    2abe:	df 91       	pop	r29
    2ac0:	08 95       	ret

00002ac2 <LCD_integerToString>:



void LCD_integerToString(uint8 data)
{
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62
    2aca:	61 97       	sbiw	r28, 0x11	; 17
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	89 8b       	std	Y+17, r24	; 0x11

	char buff[16];
	itoa(data,buff,10);
    2ad8:	89 89       	ldd	r24, Y+17	; 0x11
    2ada:	88 2f       	mov	r24, r24
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9e 01       	movw	r18, r28
    2ae0:	2f 5f       	subi	r18, 0xFF	; 255
    2ae2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ae4:	b9 01       	movw	r22, r18
    2ae6:	4a e0       	ldi	r20, 0x0A	; 10
    2ae8:	50 e0       	ldi	r21, 0x00	; 0
    2aea:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <itoa>
	LCD_displayString( buff );
    2aee:	ce 01       	movw	r24, r28
    2af0:	01 96       	adiw	r24, 0x01	; 1
    2af2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_displayString>
}
    2af6:	61 96       	adiw	r28, 0x11	; 17
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	de bf       	out	0x3e, r29	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	cd bf       	out	0x3d, r28	; 61
    2b02:	cf 91       	pop	r28
    2b04:	df 91       	pop	r29
    2b06:	08 95       	ret

00002b08 <LCD_display_int>:


void LCD_display_int(uint8 data)
{
    2b08:	df 93       	push	r29
    2b0a:	cf 93       	push	r28
    2b0c:	cd b7       	in	r28, 0x3d	; 61
    2b0e:	de b7       	in	r29, 0x3e	; 62
    2b10:	2f 97       	sbiw	r28, 0x0f	; 15
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	f8 94       	cli
    2b16:	de bf       	out	0x3e, r29	; 62
    2b18:	0f be       	out	0x3f, r0	; 63
    2b1a:	cd bf       	out	0x3d, r28	; 61
    2b1c:	8f 87       	std	Y+15, r24	; 0x0f
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    2b1e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b20:	8a 30       	cpi	r24, 0x0A	; 10
    2b22:	20 f4       	brcc	.+8      	; 0x2b2c <LCD_display_int+0x24>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    2b24:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b26:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <LCD_integerToString>
    2b2a:	03 c0       	rjmp	.+6      	; 0x2b32 <LCD_display_int+0x2a>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    2b2c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b2e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_displayChar>
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	af ea       	ldi	r26, 0xAF	; 175
    2b38:	b3 e4       	ldi	r27, 0x43	; 67
    2b3a:	8b 87       	std	Y+11, r24	; 0x0b
    2b3c:	9c 87       	std	Y+12, r25	; 0x0c
    2b3e:	ad 87       	std	Y+13, r26	; 0x0d
    2b40:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b42:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b44:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b46:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b48:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b4a:	20 e0       	ldi	r18, 0x00	; 0
    2b4c:	30 e0       	ldi	r19, 0x00	; 0
    2b4e:	4a e7       	ldi	r20, 0x7A	; 122
    2b50:	53 e4       	ldi	r21, 0x43	; 67
    2b52:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	8f 83       	std	Y+7, r24	; 0x07
    2b5c:	98 87       	std	Y+8, r25	; 0x08
    2b5e:	a9 87       	std	Y+9, r26	; 0x09
    2b60:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b62:	6f 81       	ldd	r22, Y+7	; 0x07
    2b64:	78 85       	ldd	r23, Y+8	; 0x08
    2b66:	89 85       	ldd	r24, Y+9	; 0x09
    2b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b6a:	20 e0       	ldi	r18, 0x00	; 0
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e8       	ldi	r20, 0x80	; 128
    2b70:	5f e3       	ldi	r21, 0x3F	; 63
    2b72:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2b76:	88 23       	and	r24, r24
    2b78:	2c f4       	brge	.+10     	; 0x2b84 <LCD_display_int+0x7c>
		__ticks = 1;
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	9e 83       	std	Y+6, r25	; 0x06
    2b80:	8d 83       	std	Y+5, r24	; 0x05
    2b82:	3f c0       	rjmp	.+126    	; 0x2c02 <LCD_display_int+0xfa>
	else if (__tmp > 65535)
    2b84:	6f 81       	ldd	r22, Y+7	; 0x07
    2b86:	78 85       	ldd	r23, Y+8	; 0x08
    2b88:	89 85       	ldd	r24, Y+9	; 0x09
    2b8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255
    2b90:	4f e7       	ldi	r20, 0x7F	; 127
    2b92:	57 e4       	ldi	r21, 0x47	; 71
    2b94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2b98:	18 16       	cp	r1, r24
    2b9a:	4c f5       	brge	.+82     	; 0x2bee <LCD_display_int+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ba0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ba2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e2       	ldi	r20, 0x20	; 32
    2baa:	51 e4       	ldi	r21, 0x41	; 65
    2bac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	bc 01       	movw	r22, r24
    2bb6:	cd 01       	movw	r24, r26
    2bb8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bbc:	dc 01       	movw	r26, r24
    2bbe:	cb 01       	movw	r24, r22
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	0f c0       	rjmp	.+30     	; 0x2be4 <LCD_display_int+0xdc>
    2bc6:	89 e1       	ldi	r24, 0x19	; 25
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
    2bce:	8b 81       	ldd	r24, Y+3	; 0x03
    2bd0:	9c 81       	ldd	r25, Y+4	; 0x04
    2bd2:	01 97       	sbiw	r24, 0x01	; 1
    2bd4:	f1 f7       	brne	.-4      	; 0x2bd2 <LCD_display_int+0xca>
    2bd6:	9c 83       	std	Y+4, r25	; 0x04
    2bd8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bda:	8d 81       	ldd	r24, Y+5	; 0x05
    2bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bde:	01 97       	sbiw	r24, 0x01	; 1
    2be0:	9e 83       	std	Y+6, r25	; 0x06
    2be2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be4:	8d 81       	ldd	r24, Y+5	; 0x05
    2be6:	9e 81       	ldd	r25, Y+6	; 0x06
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	69 f7       	brne	.-38     	; 0x2bc6 <LCD_display_int+0xbe>
    2bec:	14 c0       	rjmp	.+40     	; 0x2c16 <LCD_display_int+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bee:	6f 81       	ldd	r22, Y+7	; 0x07
    2bf0:	78 85       	ldd	r23, Y+8	; 0x08
    2bf2:	89 85       	ldd	r24, Y+9	; 0x09
    2bf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bf6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	9e 83       	std	Y+6, r25	; 0x06
    2c00:	8d 83       	std	Y+5, r24	; 0x05
    2c02:	8d 81       	ldd	r24, Y+5	; 0x05
    2c04:	9e 81       	ldd	r25, Y+6	; 0x06
    2c06:	9a 83       	std	Y+2, r25	; 0x02
    2c08:	89 83       	std	Y+1, r24	; 0x01
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	01 97       	sbiw	r24, 0x01	; 1
    2c10:	f1 f7       	brne	.-4      	; 0x2c0e <LCD_display_int+0x106>
    2c12:	9a 83       	std	Y+2, r25	; 0x02
    2c14:	89 83       	std	Y+1, r24	; 0x01
	}
	_delay_ms(350); /* Press time */

}
    2c16:	2f 96       	adiw	r28, 0x0f	; 15
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	f8 94       	cli
    2c1c:	de bf       	out	0x3e, r29	; 62
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	cd bf       	out	0x3d, r28	; 61
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <LCD_display_int_nodelay>:

void LCD_display_int_nodelay(uint8 data)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	0f 92       	push	r0
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	89 83       	std	Y+1, r24	; 0x01
	/* if any switch pressed for more than 500 ms it counts more than one press */
	if((data <= 9) && (data >= 0))
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	8a 30       	cpi	r24, 0x0A	; 10
    2c38:	20 f4       	brcc	.+8      	; 0x2c42 <LCD_display_int_nodelay+0x1a>
	{
		LCD_integerToString(data); /* display the pressed keypad switch */
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <LCD_integerToString>
    2c40:	03 c0       	rjmp	.+6      	; 0x2c48 <LCD_display_int_nodelay+0x20>
	}
	else
	{
		LCD_displayChar(data); /* display the pressed keypad switch */
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_displayChar>
	}

}
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <main>:




int main(void)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <main+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <main+0x8>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
	uint32 temp;
	LCD_init();
    2c5c:	0e 94 4e 12 	call	0x249c	; 0x249c <LCD_init>
	ADC_init();
    2c60:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_init>
	LCD_Clear();
    2c64:	0e 94 57 15 	call	0x2aae	; 0x2aae <LCD_Clear>
	LCD_displayString("Temp = ");
    2c68:	80 e6       	ldi	r24, 0x60	; 96
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <LCD_displayString>
	LCD_MoveTo_Row_Column(0,10);
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	6a e0       	ldi	r22, 0x0A	; 10
    2c74:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_MoveTo_Row_Column>
	LCD_displayChar('C');
    2c78:	83 e4       	ldi	r24, 0x43	; 67
    2c7a:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <LCD_displayChar>

	while(1)
	{
		LCD_MoveTo_Row_Column(0,7);
    2c7e:	80 e0       	ldi	r24, 0x00	; 0
    2c80:	67 e0       	ldi	r22, 0x07	; 7
    2c82:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_MoveTo_Row_Column>
		temp=ADC_read(2);
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	0e 94 1d 07 	call	0xe3a	; 0xe3a <ADC_read>
    2c8c:	cc 01       	movw	r24, r24
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	89 83       	std	Y+1, r24	; 0x01
    2c94:	9a 83       	std	Y+2, r25	; 0x02
    2c96:	ab 83       	std	Y+3, r26	; 0x03
    2c98:	bc 83       	std	Y+4, r27	; 0x04
		temp=(temp*150*5)/(1023*1.5);
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	ab 81       	ldd	r26, Y+3	; 0x03
    2ca0:	bc 81       	ldd	r27, Y+4	; 0x04
    2ca2:	2e ee       	ldi	r18, 0xEE	; 238
    2ca4:	32 e0       	ldi	r19, 0x02	; 2
    2ca6:	40 e0       	ldi	r20, 0x00	; 0
    2ca8:	50 e0       	ldi	r21, 0x00	; 0
    2caa:	bc 01       	movw	r22, r24
    2cac:	cd 01       	movw	r24, r26
    2cae:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__mulsi3>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	bc 01       	movw	r22, r24
    2cb8:	cd 01       	movw	r24, r26
    2cba:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    2cbe:	dc 01       	movw	r26, r24
    2cc0:	cb 01       	movw	r24, r22
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	cd 01       	movw	r24, r26
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 ed       	ldi	r19, 0xD0	; 208
    2cca:	4f eb       	ldi	r20, 0xBF	; 191
    2ccc:	54 e4       	ldi	r21, 0x44	; 68
    2cce:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	89 83       	std	Y+1, r24	; 0x01
    2ce4:	9a 83       	std	Y+2, r25	; 0x02
    2ce6:	ab 83       	std	Y+3, r26	; 0x03
    2ce8:	bc 83       	std	Y+4, r27	; 0x04
		LCD_integerToString( temp);
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <LCD_integerToString>
    2cf0:	c6 cf       	rjmp	.-116    	; 0x2c7e <main+0x2e>

00002cf2 <__mulsi3>:
    2cf2:	62 9f       	mul	r22, r18
    2cf4:	d0 01       	movw	r26, r0
    2cf6:	73 9f       	mul	r23, r19
    2cf8:	f0 01       	movw	r30, r0
    2cfa:	82 9f       	mul	r24, r18
    2cfc:	e0 0d       	add	r30, r0
    2cfe:	f1 1d       	adc	r31, r1
    2d00:	64 9f       	mul	r22, r20
    2d02:	e0 0d       	add	r30, r0
    2d04:	f1 1d       	adc	r31, r1
    2d06:	92 9f       	mul	r25, r18
    2d08:	f0 0d       	add	r31, r0
    2d0a:	83 9f       	mul	r24, r19
    2d0c:	f0 0d       	add	r31, r0
    2d0e:	74 9f       	mul	r23, r20
    2d10:	f0 0d       	add	r31, r0
    2d12:	65 9f       	mul	r22, r21
    2d14:	f0 0d       	add	r31, r0
    2d16:	99 27       	eor	r25, r25
    2d18:	72 9f       	mul	r23, r18
    2d1a:	b0 0d       	add	r27, r0
    2d1c:	e1 1d       	adc	r30, r1
    2d1e:	f9 1f       	adc	r31, r25
    2d20:	63 9f       	mul	r22, r19
    2d22:	b0 0d       	add	r27, r0
    2d24:	e1 1d       	adc	r30, r1
    2d26:	f9 1f       	adc	r31, r25
    2d28:	bd 01       	movw	r22, r26
    2d2a:	cf 01       	movw	r24, r30
    2d2c:	11 24       	eor	r1, r1
    2d2e:	08 95       	ret

00002d30 <__prologue_saves__>:
    2d30:	2f 92       	push	r2
    2d32:	3f 92       	push	r3
    2d34:	4f 92       	push	r4
    2d36:	5f 92       	push	r5
    2d38:	6f 92       	push	r6
    2d3a:	7f 92       	push	r7
    2d3c:	8f 92       	push	r8
    2d3e:	9f 92       	push	r9
    2d40:	af 92       	push	r10
    2d42:	bf 92       	push	r11
    2d44:	cf 92       	push	r12
    2d46:	df 92       	push	r13
    2d48:	ef 92       	push	r14
    2d4a:	ff 92       	push	r15
    2d4c:	0f 93       	push	r16
    2d4e:	1f 93       	push	r17
    2d50:	cf 93       	push	r28
    2d52:	df 93       	push	r29
    2d54:	cd b7       	in	r28, 0x3d	; 61
    2d56:	de b7       	in	r29, 0x3e	; 62
    2d58:	ca 1b       	sub	r28, r26
    2d5a:	db 0b       	sbc	r29, r27
    2d5c:	0f b6       	in	r0, 0x3f	; 63
    2d5e:	f8 94       	cli
    2d60:	de bf       	out	0x3e, r29	; 62
    2d62:	0f be       	out	0x3f, r0	; 63
    2d64:	cd bf       	out	0x3d, r28	; 61
    2d66:	09 94       	ijmp

00002d68 <__epilogue_restores__>:
    2d68:	2a 88       	ldd	r2, Y+18	; 0x12
    2d6a:	39 88       	ldd	r3, Y+17	; 0x11
    2d6c:	48 88       	ldd	r4, Y+16	; 0x10
    2d6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d70:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d72:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d74:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d76:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d78:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d7a:	b9 84       	ldd	r11, Y+9	; 0x09
    2d7c:	c8 84       	ldd	r12, Y+8	; 0x08
    2d7e:	df 80       	ldd	r13, Y+7	; 0x07
    2d80:	ee 80       	ldd	r14, Y+6	; 0x06
    2d82:	fd 80       	ldd	r15, Y+5	; 0x05
    2d84:	0c 81       	ldd	r16, Y+4	; 0x04
    2d86:	1b 81       	ldd	r17, Y+3	; 0x03
    2d88:	aa 81       	ldd	r26, Y+2	; 0x02
    2d8a:	b9 81       	ldd	r27, Y+1	; 0x01
    2d8c:	ce 0f       	add	r28, r30
    2d8e:	d1 1d       	adc	r29, r1
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	ed 01       	movw	r28, r26
    2d9c:	08 95       	ret

00002d9e <itoa>:
    2d9e:	fb 01       	movw	r30, r22
    2da0:	9f 01       	movw	r18, r30
    2da2:	e8 94       	clt
    2da4:	42 30       	cpi	r20, 0x02	; 2
    2da6:	c4 f0       	brlt	.+48     	; 0x2dd8 <itoa+0x3a>
    2da8:	45 32       	cpi	r20, 0x25	; 37
    2daa:	b4 f4       	brge	.+44     	; 0x2dd8 <itoa+0x3a>
    2dac:	4a 30       	cpi	r20, 0x0A	; 10
    2dae:	29 f4       	brne	.+10     	; 0x2dba <itoa+0x1c>
    2db0:	97 fb       	bst	r25, 7
    2db2:	1e f4       	brtc	.+6      	; 0x2dba <itoa+0x1c>
    2db4:	90 95       	com	r25
    2db6:	81 95       	neg	r24
    2db8:	9f 4f       	sbci	r25, 0xFF	; 255
    2dba:	64 2f       	mov	r22, r20
    2dbc:	77 27       	eor	r23, r23
    2dbe:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__udivmodhi4>
    2dc2:	80 5d       	subi	r24, 0xD0	; 208
    2dc4:	8a 33       	cpi	r24, 0x3A	; 58
    2dc6:	0c f0       	brlt	.+2      	; 0x2dca <itoa+0x2c>
    2dc8:	89 5d       	subi	r24, 0xD9	; 217
    2dca:	81 93       	st	Z+, r24
    2dcc:	cb 01       	movw	r24, r22
    2dce:	00 97       	sbiw	r24, 0x00	; 0
    2dd0:	a1 f7       	brne	.-24     	; 0x2dba <itoa+0x1c>
    2dd2:	16 f4       	brtc	.+4      	; 0x2dd8 <itoa+0x3a>
    2dd4:	5d e2       	ldi	r21, 0x2D	; 45
    2dd6:	51 93       	st	Z+, r21
    2dd8:	10 82       	st	Z, r1
    2dda:	c9 01       	movw	r24, r18
    2ddc:	0c 94 f0 16 	jmp	0x2de0	; 0x2de0 <strrev>

00002de0 <strrev>:
    2de0:	dc 01       	movw	r26, r24
    2de2:	fc 01       	movw	r30, r24
    2de4:	67 2f       	mov	r22, r23
    2de6:	71 91       	ld	r23, Z+
    2de8:	77 23       	and	r23, r23
    2dea:	e1 f7       	brne	.-8      	; 0x2de4 <strrev+0x4>
    2dec:	32 97       	sbiw	r30, 0x02	; 2
    2dee:	04 c0       	rjmp	.+8      	; 0x2df8 <strrev+0x18>
    2df0:	7c 91       	ld	r23, X
    2df2:	6d 93       	st	X+, r22
    2df4:	70 83       	st	Z, r23
    2df6:	62 91       	ld	r22, -Z
    2df8:	ae 17       	cp	r26, r30
    2dfa:	bf 07       	cpc	r27, r31
    2dfc:	c8 f3       	brcs	.-14     	; 0x2df0 <strrev+0x10>
    2dfe:	08 95       	ret

00002e00 <__udivmodhi4>:
    2e00:	aa 1b       	sub	r26, r26
    2e02:	bb 1b       	sub	r27, r27
    2e04:	51 e1       	ldi	r21, 0x11	; 17
    2e06:	07 c0       	rjmp	.+14     	; 0x2e16 <__udivmodhi4_ep>

00002e08 <__udivmodhi4_loop>:
    2e08:	aa 1f       	adc	r26, r26
    2e0a:	bb 1f       	adc	r27, r27
    2e0c:	a6 17       	cp	r26, r22
    2e0e:	b7 07       	cpc	r27, r23
    2e10:	10 f0       	brcs	.+4      	; 0x2e16 <__udivmodhi4_ep>
    2e12:	a6 1b       	sub	r26, r22
    2e14:	b7 0b       	sbc	r27, r23

00002e16 <__udivmodhi4_ep>:
    2e16:	88 1f       	adc	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	5a 95       	dec	r21
    2e1c:	a9 f7       	brne	.-22     	; 0x2e08 <__udivmodhi4_loop>
    2e1e:	80 95       	com	r24
    2e20:	90 95       	com	r25
    2e22:	bc 01       	movw	r22, r24
    2e24:	cd 01       	movw	r24, r26
    2e26:	08 95       	ret

00002e28 <_exit>:
    2e28:	f8 94       	cli

00002e2a <__stop_program>:
    2e2a:	ff cf       	rjmp	.-2      	; 0x2e2a <__stop_program>
